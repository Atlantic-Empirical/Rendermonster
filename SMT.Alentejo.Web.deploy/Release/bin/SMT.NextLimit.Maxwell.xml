<?xml version="1.0"?>
<doc>
<assembly>
<name>
SMT.NextLimit.Maxwell
</name>
</assembly>
<members>
<member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager._Proc">
	<summary>
 Process instance tied to this object.
 </summary>
</member><member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager._ProcessStarted">
	<summary>
 Indicates if this associated process has already been started.
 </summary>
</member><member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager._Disposed">
	<summary>
 Indicates if this object has already been disposed off.
 </summary>
</member><member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager._ShuttingDown">
	<summary>
 Indicates if this object's Shutdown method has been called.
 </summary>
</member><member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.ClientProcessID">
	<summary>
 Unique ID reference for tracking status (e.g. database key).
 </summary>
</member><member name="F:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.Name">
	<summary>
 Name of the object.
 </summary>
</member><member name="P:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.PID">
	<summary>
 Unique Process ID of the current running process (<c>-1</c> if none).
 </summary>
	<value>Windows Process ID (<c>-1</c> if none)</value>
</member><member name="P:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.hasProcessStarted">
	<summary>
 Indicates if the associated process has been started.
 </summary>
	<value><c>True</c> if the process has been started</value>
</member><member name="P:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.hasProcessExited">
	<summary>
 Indicates if the associated process has exited.
 </summary>
	<value><c>True</c> if the process has exited</value>
</member><member name="E:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.evLogLineOutput">
	<summary>
 Event triggered each time a new line of text is output from the process log.
 </summary>
	<param name="ClientProcessID"></param>
	<param name="Name">Object name</param>
	<param name="PID">Windows Process ID</param>
	<param name="Line">Line of text to add to log</param>
	<remarks>Handle this event to capture the log output from the process.</remarks>
</member><member name="E:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.evProcessExited">
	<summary>
 Event triggered when the process exits.
 </summary>
	<param name="ClientProcessID"></param>
	<param name="Name">Object name</param>
	<param name="PID">Windows Process ID</param>
	<param name="Succeeded">Boolean indicating if the process succeeded or terminated with an exit code</param>
	<remarks>Handle this event to capture the output status of the process.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.#ctor(System.Int32,System.String,System.String,System.String)">
	<summary>
 Creates a new instance of the class, assigns its properties, 
 and instantiates the process (but does not start it).
 </summary>
	<param name="aProcessID">Unique ID for tracking status</param>
	<param name="aName">Name of this object</param>
	<remarks>Use to create a new instance of the class for launching 
 a process.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.Dispose">
	<summary>
 Destructor.  Removes event handlers when object is destroyed.
 </summary>
	<remarks>Removes event handlers when object is destroyed.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.Dispose(System.Boolean)">
	<summary>
 Disposing method.
 </summary>
	<param name="disposing">If <c>True</c>, method has been called 
 directly or indirectly by user's code.  Both managed and unmanaged 
 resources can be disposed.  If <c>False</c>, method has been 
 called by the runtime from inside the finalizer, so other 
 objects should not be referenced.  Only unmanaged resources 
 can be disposed.</param>
	<remarks>Used to dispose of the object's resources and end tracing.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.Finalize">
	<summary>
 This finalizer will run only if the Dispose method does not 
 get called.  It gives the base class the opportunity to 
 finalize.
 </summary>
	<remarks>Do not provide finalize methods in types derived 
 from this class.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.Shutdown">
	<summary>
 Terminate the current process.
 </summary>
	<remarks>Removes event handlers and kills the associated process.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.ProcessExited(System.Object,System.EventArgs)">
	<summary>
 Event handler for process exiting.  (Do not call directly.)
 </summary>
	<param name="sender">Process that triggered the event</param>
	<param name="e">Event arguments</param>
	<remarks>Do not call this method.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager.ProcessOutput(System.Object,System.Diagnostics.DataReceivedEventArgs)">
	<summary>
 Event handler for log output.  (Do not call directly.)
 </summary>
	<param name="sender">Process that triggered the event</param>
	<param name="outLine">Line of log output text</param>
	<remarks>Do not call this method.</remarks>
</member><member name="T:SMT.NextLimit.Maxwell.Win.ProcessExecution.cProcessManager">
	<summary>
 Class representing an executable process.
 </summary>
	<remarks>This is a single-use class in which one instance may launch 
 a single process.</remarks>
</member><member name="M:SMT.NextLimit.Maxwell.GENERAL.ComputeNodeLevelTarget(System.Byte,System.Double)">
	<summary>
 Use this method to determine the sample level to assign to each node in a cooperative render, in order to reach an ultimate target value.
 </summary>
	<param name="Nodes"></param>
	<param name="TargetLevel"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:SMT.NextLimit.Maxwell.cMXCL.SETTING_OUTPUT_PATH">
	<summary>
 The full path including file name of the output target.
 The extension of the output file specified here determines the 
 output file format.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SMT.NextLimit.Maxwell.cMXCL.SETTING_MXI_PATH">
	<summary>
 Only required if MXI should be placed somewhere other than the same directory as Output file.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:SMT.NextLimit.Maxwell.cMXCL.SETTING_IS_SERVER">
	<summary>
 Set to the IP address of the Maxwell Network Render Manager.
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="M:SMT.NextLimit.Maxwell.cMXCL.IsValidIP(System.String)">
	<summary>
 method to validate an IP address
 using regular expressions. The pattern
 being used will validate an ip address
 with the range of 1.0.0.0 to 255.255.255.255
 </summary>
	<param name="addr">Address to validate</param>
	<returns></returns>
</member>
</members>
</doc>