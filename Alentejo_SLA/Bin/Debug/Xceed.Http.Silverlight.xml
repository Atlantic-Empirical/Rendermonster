<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Xceed.Http.Silverlight</name>
    </assembly>
    <members>
        <member name="T:Xceed.Http.Uploader.BuildingHttpWebRequestEventArgs">
            <summary>
            Provides information on the HttpWebRequest being built.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.BuildingHttpWebRequestEventArgs.#ctor">
            <summary>
            Initializes a new instance of the BuildingHttpWebRequestEventArgs class.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.BuildingHttpWebRequestEventArgs.HttpWebRequest">
            <summary>
            Gets the HttpWebRequest used to perform the HTTP upload.
            </summary>
            <value>An HttpWebRequest object used to perform the HTTP upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.BuildingHttpWebRequestEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="T:Xceed.Http.Uploader.ByteProgressionEventArgs">
            <summary>
            Provides byte progression information.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.ByteProgressionEventArgs.#ctor(Xceed.Http.Uploader.ProgressionInfo,Xceed.Http.Uploader.ProgressionInfo)">
            <summary>
            Initializes a new instance of the ByteProgressionEventArgs argument class.
            </summary>
            <param name="currentFileBytes">The size, in bytes, of the file currently being processed.</param>
            <param name="allFilesBytes">The total combined size, in bytes, of all files being processed.</param>
        </member>
        <member name="F:Xceed.Http.Uploader.ByteProgressionEventArgs.CurrentFileBytesInternal">
            <summary>
            An instance of the ProgressionInfo class representing the byte count information of 
            all the items to be processed.
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.ByteProgressionEventArgs.AllFilesBytesInternal">
            <summary>
            An instance of the ProgressionInfo class representing the byte count information of 
            the item currently being processed.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.CurrentName">
            <summary>
            Gets the control name of the file currently being processed.
            </summary>
            <value>A string representing the control name of the file currently being processed.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.CurrentFileName">
            <summary>
            Gets the name of the file currently being processed.
            </summary>
            <value>A string representing the name of the file currently being processed.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.CurrentFileBytes">
            <summary>
            Gets the size, in bytes, of the file currently being processed.
            </summary>
            <value>A value indicating the size, in bytes, of the file being processed.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.AllFilesBytes">
            <summary>
            Gets the total combined size, in bytes, of all files being processed.
            </summary>
            <value>A value indicating the size, in bytes, of all the files being processed.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.Aborted">
            <summary>
            Gets or sets a boolean value indicating whether the upload operation should be aborted.
            </summary>
            <value>A boolean value indicating whether the upload operation should be aborted.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ByteProgressionEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpEventsSession">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEventsSession.#ctor(Xceed.Http.Uploader.HttpEvents,System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEventsSession.OnGettingHttpWebResponse(System.Net.HttpWebResponse)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.Events">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.Sender">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.UserData">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.FileSystemHttpEventsSession">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.AbortRequested">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.BuildingHttpWebRequestArgs">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.HttpWebRequestStreamArgs">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.ByteProgressionArgs">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.HttpWebResponseArgs">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.CurrentFileBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to the current item being processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.AllFilesBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to all the items to be processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpEventsSession.AllItems">
            <summary>
            An instance of the ProgressionInfo class representing the item count information
            for the current session.
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpWebRequestStreamEventArgs">
            <summary>
            Provides information on the HttpWebRequest and stream.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpWebRequestStreamEventArgs.#ctor">
            <summary>
            Initializes a new instance of the HttpWebRequestStreamEventArgs argument class.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpWebRequestStreamEventArgs.HttpWebRequest">
            <summary>
            Gets the HttpWebRequest used to perform the upload.
            </summary>
            <value>An HttpWebRequest object used to perform the upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpWebRequestStreamEventArgs.Stream">
            <summary>
            Gets or sets the stream used to perform the upload.
            </summary>
            <value>A Stream object used to perform the upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpWebRequestStreamEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpWebResponseEventArgs">
            <summary>
            Provides information on the Web server's response to the upload.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpWebResponseEventArgs.#ctor">
            <summary>
            Initializes a new instance of the HttpWebResponseEventArgs argument class.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpWebResponseEventArgs.HttpWebResponse">
            <summary>
            Gets the response from the Web server.
            </summary>
            <value>An HttpWebResponse object representing the response from the Web server.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpWebResponseEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="T:Xceed.Http.BuildingHttpWebRequestEventArgs">
            <summary>
            Provides information regarding the zip file that is being spanned or split.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventArgs">
            <summary>
            The base class for argument classes used by all events.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventArgs.#ctor">
            <summary>
            Initializes a new instance of the FileSystemEventArgs class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_userData">
            <summary>
            Opaque data that is sent back to the event handler when an event is raised.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_currentItem">
            <summary>
            The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventArgs.m_targetItem">
            <summary>
            The current target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object of the process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.UserData">
            <summary>
            Gets or sets the opaque data that will be sent back to the event 
            handler whenever an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.CurrentItem">
            <summary>  
            Gets or sets the current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventArgs.TargetItem">
            <summary>    
            Gets or sets the destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>   
            <value>A reference to the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value> 
        </member>
        <member name="M:Xceed.Http.BuildingHttpWebRequestEventArgs.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.BuildingHttpWebRequestEventArgs.HttpWebRequest">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.HttpEvents">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEvents">
            <summary>
            Class that dispatches events raised from methods called on <see cref="T:Xceed.FileSystem.FileSystemItem"/> 
            objects or objects that derive from the <see cref="T:Xceed.FileSystem.FileSystemItem"/> class.
            </summary>
            <remarks><para>
            This class serves as a central point of access to associate event
            handlers with method calls, for methods that need to raise events.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.CreateSession(System.Object,System.Object)">
            <summary>
            Initializes a new session from a <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object.
            </summary>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object from which the session is created.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.BeginSubOperation">
            <summary>
            Called when a sub-operation is begun within a process.
            </summary>
            <remarks><para>Increments the sub-operation counter.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.EndSubOperation">
            <summary>
            Called when a sub-operation is ended within a process.
            </summary>
            <remarks><para>Decrements the sub-operation counter.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnByteProgression(System.Object,Xceed.FileSystem.ByteProgressionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemProgression(System.Object,Xceed.FileSystem.ItemProgressionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnScanningFolder(System.Object,Xceed.FileSystem.ScanningFolderEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.OnItemException(System.Object,Xceed.FileSystem.ItemExceptionEventArgs)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> that contains the event data.</param>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEvents.ValidateParams(System.Object,Xceed.FileSystem.FileSystemEventArgs)">
            <summary>
            Verifies the validity of the parameters sent to the event handlers.
            </summary>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> on which the method was called.</param>
            <param name="e">An instance of the <see cref="T:Xceed.FileSystem.FileSystemEventArgs"/> argument
            class.</param>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEvents.m_subOperationCount">
            <summary>
            Sub-operation counter which keeps a reference count on the amount of sub-operations
            within a process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.Empty">
            <exclude/>
            <summary>
            This property is reserved for internal use and is not intended to be used directly from your code.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">
            <summary>
            Raised when an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object is accessed or is 
            scanned for matching items while building a list of items to process.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">
            <summary>
            Raised every time a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object is 
            <b>about to be processed</b>, providing progression information to the event handler.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">
            <summary>
            Raised for every 64k of bytes processed when a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object
            is being processed.
            </summary>
        </member>
        <member name="E:Xceed.FileSystem.FileSystemEvents.ItemException">
            <summary>
            Raised when an exception is caught during the processing of a 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object, allowing the handler to decide the action to take.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsScanningFolder">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemProgression">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsByteProgression">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEvents.WantsItemException">
            <summary>
            Gets a boolean value indicating if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <value><see langword="true"/> if the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object 
            has subscribed to the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event; <see langword="false"/> 
            otherwise.</value>        
        </member>
        <member name="M:Xceed.Http.HttpEvents.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEvents.CreateSession(System.Object,System.Object)">
            <summary>
            Creates a new session from a ZipEvents object.
            </summary>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object from which the session is created.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <returns>A reference to a ZipEventsSession object.</returns>
        </member>
        <member name="M:Xceed.Http.HttpEvents.OnBuildingHttpWebRequest(System.Object,Xceed.Http.BuildingHttpWebRequestEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEvents.OnNewHttpWebRequestWriteStream(System.Object,Xceed.Http.HttpWebRequestStreamEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEvents.OnNewHttpWebRequestReadStream(System.Object,Xceed.Http.HttpWebRequestStreamEventArgs)">
            <summary>
            </summary>
        </member>
        <member name="E:Xceed.Http.HttpEvents.BuildingHttpWebRequest">
            <summary>
            Raised every time a zip file is being read for the first time or being refreshed,
            providing progression information to the event handler.
            </summary>    
        </member>
        <member name="E:Xceed.Http.HttpEvents.NewHttpWebRequestWriteStream">
            <summary>
            Raised every time a zip file is being read for the first time or being refreshed,
            providing progression information to the event handler.
            </summary>    
        </member>
        <member name="E:Xceed.Http.HttpEvents.NewHttpWebRequestReadStream">
            <summary>
            </summary>    
        </member>
        <member name="P:Xceed.Http.HttpEvents.WantsBuildingHttpWebRequest">
            <summary>
            Gets a boolean value indicating if the ZipEvents object 
            has subscribed to the ReadingZipItemProgression event.
            </summary>
            <value><see langword="true"/> if the ZipEvents object 
            has subscribed to the ReadingZipItemProgression event; <see langword="false"/> 
            otherwise.</value>    
        </member>
        <member name="P:Xceed.Http.HttpEvents.WantsNewHttpWebRequestWriteStream">
            <summary>
            Gets a boolean value indicating if the ZipEvents object 
            has subscribed to the ReadingZipItemProgression event.
            </summary>
            <value><see langword="true"/> if the ZipEvents object 
            has subscribed to the ReadingZipItemProgression event; <see langword="false"/> 
            otherwise.</value>    
        </member>
        <member name="P:Xceed.Http.HttpEvents.WantsNewHttpWebRequestReadStream">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.HttpEventsSession">
            <summary>
            Class which derives from the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> class and 
            holds information about the session which is responsible for raising 
            all events that occur during the process.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemEventsSession">
            <summary>    
            Class which holds information about the session which is responsible for 
            raising all events that occur during the process.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.#ctor(Xceed.FileSystem.FileSystemEvents,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> class.
            </summary>
            <param name="events">The <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object from which we created
            the session.</param>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object on which the process was called.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <remarks><para>This constructor is called within the <see cref="M:Xceed.FileSystem.FileSystemEvents.CreateSession(System.Object,System.Object)"/> method
            found in the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> class.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnScanningFolder(Xceed.FileSystem.AbstractFolder)">
            <summary>
            Raises the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="currentFolder">The <see cref="T:Xceed.FileSystem.AbstractFolder"/> object being scanned.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnNewItemToProcess(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Places the new item in the list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <param name="currentItem">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="targetItem">The eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being added
            to the list of items.</param>
            <remarks><para>If both currentItem and targetItem are null, the total number of items to process
            is incremented, but no ItemPair is added to the list. In this case, the caller is now
            responsible for calling OnProcessingNewItem the same number of times, and explicitly
            call OnCompletion when done, since the final call to GetNextItemPair (which returns null)
            won't complete the progression.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnProcessingNewItem(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Called when a new item is about to be processed.    
            </summary>
            <param name="current">The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="target">The eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object for the process.</param>
            <param name="raiseBytesProgression">A boolean value indicating if we want bytes progression events to be raised.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.GetNextItemPair(System.Boolean)">
            <summary>
            Retrieves the next pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <param name="raiseBytesProgression">A boolean value indicating if the <see langword="ByteProgression"/> event should be raised.</param>
            <returns>An <see cref="T:Xceed.FileSystem.ItemPair"/> object.</returns>
            <remarks><para>
            A pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects consisting of the current item 
            being processed and it's eventual target or destination item. 
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesProcessed(System.Int64)">
            <summary>
            Raises the <see langword="FileSystemEvents.ByteProgression"/> event.    
            </summary>
            <param name="increment">The amount of bytes to be added to the total amount of bytes processed so far.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnBytesCompleted">
            <summary>    
            Forces the byte progression to 100% completion.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnUndoBytesProcessed">
            <summary>
            Removes the amount of bytes processed for an item if an error 
            occurred during the processing of that item.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnException(System.Exception)">
            <summary>
            Raises the <see langword="ItemException"/> event whenever an error occurs during the 
            processing of a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="except">The error that occurred.</param>
            <returns><see langword="true"/> if we want to retry processing the item; <see langword="false"/> if
            the item should be ignored or the process aborted.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemEventsSession.OnCompletion">
            <summary>
            Raises the last <see langword="ItemProgression"/> event when the process is completed.    
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentFileBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to the current item being processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allFilesBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to all the items to be processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_allItems">
            <summary>
            An instance of the ProgressionInfo class representing the item count information
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_scanningFolderArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> class 
            that provides information on the folder being scanned or accessed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_byteProgressionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> class
            that provides byte progression information for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemProgressionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> class
            that provides item progression information for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemExceptionArgs">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> class 
            that provides information on the exception that was thrown during a process
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_currentItem">
            <summary>
            The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_targetItem">
            <summary>
            The current target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object of the process 
            for the current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_events">
            <summary>
            An instance of the <see cref="T:Xceed.FileSystem.FileSystemEvents"/> class representing the 
            original <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object from which we created the session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_sender">
            <summary>
            The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object on which the process was called.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_userData">
            <summary>
            This is set at construction, and updated after each event.
            It is assigned to each argument structure before each event.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairQueue">
            <summary>
            Represents a first-in, first-out collection of the items to process for the 
            current session.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairList">
            <summary>
            Represents a sorted collection of the items to process for the current session.
            Some FileSystem implementations require sorting items before processing them in order
            to improve performance.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_aborted">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemEventsSession.m_itemPairListComparer">
            <summary>
            The comparer assigned to the SortedList. Kept to double check on subsequent calls
            to AssignComparer.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.Events">
            <summary>
            Gets the original <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object used to create the session.
            </summary>
            <value>A reference to <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object.</value>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.UserData">
            <summary>
            Gets the opaque data that is sent back to the event handler when an event is raised.
            </summary>
            <value>Opaque data that is sent back to the event handler.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.CurrentItem">
            <summary>
            Gets or sets the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object currently being processed.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.TargetItem">
            <summary>
            Gets or sets the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object for the process.
            </summary>
            <value>A reference to the eventual target <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.IsEmpty">
            <summary>
            Gets a boolean value indicating if the session's list of 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process contains no items. 
            </summary>
            <value><see langword="true"/> if the list is empty; <see langword="false"/> otherwise.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemEventsSession.Aborted">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEventsSession.#ctor(Xceed.Http.HttpEvents,System.Object,System.Object)">
            <summary>
            Initializes a new instance of the ZipEventsSession class.
            </summary>
            <param name="events">The ZipEvents object from which we created
            the session.</param>
            <param name="sender">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object on which the process was called.</param>
            <param name="userData">Opaque data that is sent back to the event handler when an event is raised.</param>
            <remarks><para>This constructor is called within the ZipEvents.CreateSession method
            found in the ZipEvents class.</para></remarks>
        </member>
        <member name="M:Xceed.Http.HttpEventsSession.OnBuildingHttpWebRequest(System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEventsSession.OnNewHttpWebRequestWriteStream(System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpEventsSession.OnNewHttpWebRequestReadStream(System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpEventsSession.BuildingHttpWebRequestArgsInternal">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpEventsSession.HttpWebRequestStreamArgsInternal">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpEventsSession.HttpEvents">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpEventsSession.Options">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.HttpWebResponseEventArgs">
            <summary>
            Provides information regarding the zip file that is being spanned or split.
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpWebResponseEventArgs.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpWebResponseEventArgs.HttpWebResponse">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.HttpWebRequestStreamEventArgs">
            <summary>
            
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpWebRequestStreamEventArgs.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpWebRequestStreamEventArgs.HttpWebRequest">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpWebRequestStreamEventArgs.Stream">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.FileToUpload">
            <summary>
            Represents a file that will be uploaded to the HTTP server.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.FileToUpload.#ctor">
            <summary>
            Initializes a new instance of the FileToUpload class using the provided stream.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.FileToUpload.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the FileToUpload class using the provided stream.
            </summary>
            <param name="stream">A Stream object that acts as the source of the data for the file that will be uploaded.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.FileToUpload.#ctor(System.IO.Stream,System.String,System.String)">
            <summary>
            Initializes a new instance of the FileToUpload class using the provided stream and strings.
            </summary>
            <param name="stream">A Stream object that acts as the source of the data for the file that will be uploaded.</param>
            <param name="name">The logical name of the file that will be uploaded.</param>
            <param name="fileName">The filename of the file that will be uploaded.</param>
        </member>
        <member name="P:Xceed.Http.Uploader.FileToUpload.Stream">
            <summary>
            Gets or sets the stream that acts as the source of the data for the file that will be uploaded.
            </summary>
            <value>A Stream object that acts as the source of the data for the file that will be uploaded.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.FileToUpload.Name">
            <summary>
            Gets or sets the control name of the file that will be uploaded.
            </summary>
            <value>A string representing the control name of the file that will be uploaded.</value>
            <remarks>The control name serves as a hint for the Web server as to what the file contains.</remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.FileToUpload.FileName">
            <summary>
            Gets or sets the name of the file that will be uploaded.
            </summary>
            <value>A string representing the name of the file that will be uploaded.</value>
            <remarks>The filename is the suggested name for the data being uploaded should it be saved to disk.</remarks>
        </member>
        <member name="T:Xceed.Http.DataEncodingMode">
            <summary>
            Represents the format used to encode the data.
            </summary>
        </member>
        <member name="F:Xceed.Http.DataEncodingMode.None">
            <summary>
            No encoding is performed.
            </summary>
        </member>
        <member name="F:Xceed.Http.DataEncodingMode.Auto">
            <summary>
            The encoding format is chosen based on the browser in which the Silverlight is hosted.
            </summary>
        </member>
        <member name="F:Xceed.Http.DataEncodingMode.Base64">
            <summary>
            The Base64 encoding format as defined by RFC-2045 and the XML specification. 
            Used by the MIME format to encode email attachments. This encoding mode is 
            provided to support browsers that do not allow non-ASCII data to be uploaded.
            </summary>
        </member>
        <member name="T:Xceed.Http.FeatureID">
            <summary>
            Contains each feature identifier requiring special 
            licensing requirements permissions to execute.
            </summary>
        </member>
        <member name="F:Xceed.Http.FeatureID.NoFeatureSpecified">
            <summary>
            No feature was specified.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Licensing.XceedLicense.Initialize(System.String,System.Type)">
            <summary>
            Must be called after instantiation to initialize and verify the license parameters 
            </summary>
            <param name="licenseKey"></param>
            <param name="licenserType"></param>
        </member>
        <member name="M:Xceed.Utils.Licensing.XceedLicense.GetLicenseKeyFromRegistry">
            <summary>
            Retreives the license from the registry. Usefull when there is no license set on a developper's machine.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Xceed.Utils.Licensing.XceedLicense.ValidateLicenseKey(Xceed.Utils.Licensing.XceedLicenseManager@,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Validates a license key \
            if there is no license key in the registry 
              on a developper's machine -> trial is beginning
              not on a developper's machine -> 
            </summary>
        </member>
        <member name="F:Xceed.Utils.Licensing.XceedLicense.m_daysLeft">
            <summary>
            Days left until trial expires
            </summary>
        </member>
        <member name="F:Xceed.Utils.Licensing.XceedLicense.m_isFromRegistry">
            <summary>
            True if the license was read from the registry
            </summary>
        </member>
        <member name="F:Xceed.Utils.Licensing.XceedLicense.m_performedFeratureAnalysis">
            <summary>
            Remembers all previously used feature analysis 
            </summary>
        </member>
        <member name="P:Xceed.Utils.Licensing.XceedLicense.IsFromRegistry">
            <summary>
            True if the license was read from the registry
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpLicense.CreateLicense(System.String,System.Type)">
            <summary>
            Create xceed specific component license here.
            </summary>
            <param name="licenseKey"></param>
            <param name="licenserType"></param>
            <returns></returns>
        </member>
        <member name="P:Xceed.Http.HttpLicense.AllowedVersions">
            <summary>
            All the version numbers supported by this version of the product.
            </summary>
            <remarks>
            The versions should be in descending order beginning with the
            less restrictive up to the more restrictive.
            </remarks>
        </member>
        <member name="P:Xceed.Http.HttpLicense.LicenseeType">
            <summary>
            The type of the class or control that is licensed by this class (or, more
            exactly, a class derived from this one).
            </summary>
            <remarks>
            If more than one class is licensed by the XceedLicense class, the LicenseeType
            can simply be typeof( Licenser ).
            </remarks>
        </member>
        <member name="T:Xceed.Http.HttpOptions">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.Default">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpOptions.#ctor">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.UploadMethodPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.RollbackPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.UseHttp11PropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.BoundaryPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.HeadersInternal">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.MIMEPartHeadersInternal">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpOptions.DataEncodingModePropertyKey">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.UploadMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.Rollback">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.UseHttp11">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.Boundary">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.Headers">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpOptions.MIMEPartHeaders">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.DefaultHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Licenser">
            <summary>
            Class which is used to register the classes located in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            We recommend you set the LicenseKey property in the main entry point of the application.
            For example, the LicenseKey property can be set, for C# users, in the static main
            function. For VB.NET users, it can be set in the constructor of the main form or
            in the "Sub Main" procedure. If no entry point is available, it is recommended that the LicenseKey 
            property be set in a static constructor of a class that will be accessed systematically before
            any of the library's classes are instantiated or, you can simply set the LicenseKey
            property immediately BEFORE you instantiate a class.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Licenser.VerifyLicense">
            <summary>
            Verifies that the license is valid for a specific product.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Xceed.Http.Licenser.LicenseKey">
            <summary>
            Gets or sets the license key used to license this product.
            </summary>
            <value>A string value representing the license key used to license this product.</value>
        </member>
        <member name="M:Xceed.Utils.Collections.SortedList`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Collections.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.AsyncInvoke">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.AsyncInvoke.BeginInvoke(System.Delegate,System.Object[],System.AsyncCallback,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.AsyncInvoke.EndInvoke(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.AsyncInvoke.WaitCallbackMethod(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.SilverlightAsyncState">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.SilverlightAsyncState.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.SilverlightAsyncState.AsyncState">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.SilverlightAsyncState.AsyncWaitHandle">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.SilverlightAsyncState.CompletedSynchronously">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.SilverlightAsyncState.IsCompleted">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.SilverlightAsyncState.Event">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.CompressionLevel">
            <summary>
            Represents the amount of compression to be applied when compressing data.
            The greater the amount of compression applied, the greater the time it takes to perform the compression.
            </summary>
        </member>
        <member name="F:Xceed.Http.CompressionLevel.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Http.CompressionLevel.Lowest">
            <summary>Minimum compression. Takes the least amount of time to compress data.</summary>
        </member>
        <member name="F:Xceed.Http.CompressionLevel.Normal">
            <summary>Normal compression. Best balance between the time it takes to compress data 
            and the compression ratio achieved.</summary>
        </member>
        <member name="F:Xceed.Http.CompressionLevel.Highest">
            <summary>Maximum compression. Best compression ratio that the compression algorithm is capable of 
            producing. Compared to the Normal compression level, this level significantly increases compression 
            time for only slightly smaller compressed data. It is recommended to use this setting only when 
            you really need to achieve the smallest possible files and when compression time is not important.
            </summary>
        </member>
        <member name="T:Xceed.Http.CompressionMethod">
            <summary>
            Represents the compression algorithm to be used when compressing data.
            </summary>
        </member>
        <member name="F:Xceed.Http.CompressionMethod.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Http.CompressionMethod.Deflated">
            <summary>Deflate algorithm.</summary>
        </member>
        <member name="F:Xceed.Http.CompressionMethod.GZip">
            <summary>Deflate algorithm, surrounded with a header and a footer for data integrity.</summary>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpEvents">
            <summary>
            Class that dispatches events associated with HTTP upload operations.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.#ctor">
            <summary>
            Initializes a new instance of the HttpEvents class.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.#ctor(System.Windows.Threading.Dispatcher)">
            <summary>
            Initializes a new instance of the HttpEvents class using the provided Dispatcher object.
            </summary>
            <param name="dispatcher">A Dispatcher object for managing the queue of work items for a thread.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.OnBuildingHttpWebRequest(System.Object,Xceed.Http.Uploader.BuildingHttpWebRequestEventArgs)">
            <summary>
            Raises the BuildingHttpWebRequest event.
            </summary>
            <param name="e">A BuildingHttpWebRequestEventArgs object that contains the event data.</param>
            <param name="sender">The object on which the method was called.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.OnNewHttpWebRequestStream(System.Object,Xceed.Http.Uploader.HttpWebRequestStreamEventArgs)">
            <summary>
            Raises the NewHttpWebRequestStream event.
            </summary>
            <param name="e">An HttpWebRequestStreamEventArgs object that contains the event data.</param>
            <param name="sender">The object on which the method was called.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.OnByteProgression(System.Object,Xceed.Http.Uploader.ByteProgressionEventArgs)">
            <summary>
            Raises the ByteProgression event.
            </summary>
            <param name="e">A ByteProgressionEventArgs object that contains the event data.</param>
            <param name="sender">The object on which the method was called.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.OnGettingHttpWebResponse(System.Object,Xceed.Http.Uploader.HttpWebResponseEventArgs)">
            <summary>
            Raises the GettingHttpWebResponse event.
            </summary>
            <param name="e">An HttpWebResponseEventArgs object that contains the event data.</param>
            <param name="sender">The object on which the method was called.</param>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.OnHttpWebResponseReceived(System.Object,Xceed.Http.Uploader.HttpWebResponseEventArgs)">
            <summary>
            Raises the HttpWebResponseReceived event.
            </summary>
            <param name="e">An HttpWebResponseEventArgs object that contains the event data.</param>
            <param name="sender">The object on which the method was called.</param>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.Empty">
            <summary>
            Gets an empty HttpEvents object.
            </summary>
            <value>An HttpEvents object containing empty events for the upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.UIThreadDispatcher">
            <summary>
            Gets or sets the Dispatcher that determines on which thread event handlers will be triggered.
            </summary>
            <value>A Dispatcher that determines on which thread event handlers will be triggered.</value>
            <remarks><para>By default, this property returns a Dispatcher object for the main user interface 
            thread on which event handlers triggered by the HttpEvents class will be executed. </para>
            <para>If UIThreadDispatcher is set to null, the event handlers will be triggered on whatever 
            thread they happen to originate from. Setting this property to null will improve performance, 
            but you will not be able to update user interface controls from your event handlers.</para>
            </remarks>
        </member>
        <member name="E:Xceed.Http.Uploader.HttpEvents.BuildingHttpWebRequest">
            <summary>
            Raised every time an HttpWebRequest is being built.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.WantsBuildingHttpWebRequest">
            <summary>
            Gets a boolean value indicating whether the HttpEvents object has subscribed to the BuildingHttpWebRequest event.
            </summary>
            <value>true if the HttpEvents object has subscribed to the BuildingHttpWebRequest event; false otherwise. By default, true.</value>
        </member>
        <member name="E:Xceed.Http.Uploader.HttpEvents.NewHttpWebRequestStream">
            <summary>
            Raised when a new stream for an item to be uploaded is created.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.WantsNewHttpWebRequestStream">
            <summary>
            Gets a boolean value indicating whether the HttpEvents object has subscribed to the NewHttpWebRequestStream event.
            </summary>
            <value>true if the HttpEvents object has subscribed to the NewHttpWebRequestStream event; false otherwise. By default, true.</value>
        </member>
        <member name="E:Xceed.Http.Uploader.HttpEvents.ByteProgression">
            <summary>
            Raised for every 64k of bytes processed when a file is being uploaded.
            </summary>
            <remarks>When the total size is unknown, the number of processed bytes will be incremented during the read process, 
            the total bytes will always be zero, and the percent will always by 100.</remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.WantsByteProgression">
            <summary>
            Gets a boolean value indicating whether the HttpEvents object has subscribed to the ByteProgression event.
            </summary>
            <value>true if the HttpEvents object has subscribed to the ByteProgression event; false otherwise. By default, true.</value>
        </member>
        <member name="E:Xceed.Http.Uploader.HttpEvents.GettingHttpWebResponse">
            <summary>
            Raised when an HttpWebResponse is being retrieved.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.WantsGettingHttpWebResponse">
            <summary>
            Gets a boolean value indicating whether the HttpEvents object has subscribed to the GettingHttpWebResponse event.
            </summary>
            <value>true if the HttpEvents object has subscribed to the GettingHttpWebResponse event; false otherwise.</value>
        </member>
        <member name="E:Xceed.Http.Uploader.HttpEvents.HttpWebResponseReceived">
            <summary>
            Raised when an HttpWebReponse has been received from the Web server.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpEvents.WantsHttpWebResponseReceived">
            <summary>
            Gets a boolean value indicating whether the HttpEvents object has subscribed to the HttpWebResponseReceived event.
            </summary>
            <value>true if the HttpEvents object has subscribed to the HttpWebResponseReceived event; false otherwise.</value>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpEvents.UploaderHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.EncodedHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpOptions.Default">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpOptions.#ctor">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpOptions.CompressionMethodPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpOptions.CompressionLevelPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpOptions.EncryptionMethodPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpOptions.EncryptionLevelPropertyKey">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.EncodedHttpOptions.CompressionMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.EncodedHttpOptions.CompressionLevel">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.EncodedHttpOptions.EncryptionMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.EncodedHttpOptions.EncryptionLevel">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.UploaderHttpOptions.CreateSession(System.Object,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpEvents.EmptyHttpEvents.#ctor">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.ProgressionInfo">
            <summary>
            Provides progression information for progression events.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.ProgressionInfo.#ctor">
            <summary>
            Initializes a new instance of the ProgressionInfo class.
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.ProgressionInfo.m_processed">
            <summary>
            The amount of bytes or items processed.
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.ProgressionInfo.m_total">
            <summary>
            The total amount of bytes or items to process.
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.ProgressionInfo.Processed">
            <summary>
            Gets or sets the number of bytes or FileSystemItem objects processed so far.
            </summary>
            <value>A value indicating the number of bytes or FileSystemItem objects processed so far.</value>   
        </member>
        <member name="P:Xceed.Http.Uploader.ProgressionInfo.Total">
            <summary>    
            Gets or sets the total number of bytes or FileSystemItem objects to be processed.
            </summary>
            <value>A value indicating the number of bytes or FileSystemItem objects to be processed.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.ProgressionInfo.Percent">
            <summary>
            Gets the ratio (percentage) of bytes or FileSystemItem objects processed so far.
            </summary>
            <value>A value indicating the ratio of bytes or FileSystemItem objects processed so far.</value>
        </member>
        <member name="M:Xceed.Http.StringStream.Close">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.StringStream.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="explicitDispose"></param>
        </member>
        <member name="T:Xceed.Http.EncodedMultipartFormData">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.MultipartFormData">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFolder">
            <summary>
            Represents a generic folder, and exposes properties and methods that allow folder-oriented 
            operations to be performed.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemItem">
            <summary>
            Root class for all types of items that can exist in a generic 
            (abstract) folder. For example, a file and a folder.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> class.     
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemItem.FolderSeparator">
            <summary>
            String equivalent of <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FileSystemItem.AltFolderSeparator">
            <summary>
            String equivalent of <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh">
            <summary>
            Re-reads the information from the physical item.
            </summary>
            <remarks><para>
            When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> 
            or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, are first accessed, a snapshot of the underlying 
            physical item's properties is taken. This snapshot is <b>not</b> automatically updated 
            whenever the physical item's properties change.</para><para>
            <see langword="Refresh"/> re-reads the information from the physical item and updates the snapshot.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Refresh(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Re-reads the information from the physical item and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, 
            such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties 
            is taken. This snapshot is <b>not</b> automatically updated whenever the physical 
            item's properties change.</para><para>
            <see langword="Refresh"/> re-reads the information from the physical item 
            and updates the snapshot.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create">
            <summary>
            Creates the physical item represented by this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, an empty file is created. If
            it represents a folder, a folder is created.</para><para>
            If the physical item already exists, an exception is thrown.</para><para>
            If the physical folder in which the new item is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Create(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Creates the physical item represented by this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object
            and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, 
            an empty file is created. If it represents a folder, a folder is created.</para>
            <para>If the physical item already exists, an exception is thrown.</para><para>
            If the physical folder in which the new item is to be created does not exist, 
            it is created.</para><para>The current property values (such as 
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly created 
            item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCreateCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair)">
            <summary>Creates the item pair's current <see cref="T:Xceed.FileSystem.FileSystemItem"/>.</summary>
            <isnew>10/17/2006</isnew>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an <see cref="T:Xceed.FileSystem.ItemPair"/> object
            which contains the item to be created.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete">
            <summary>
            Permanently deletes the physical item.
            </summary>    
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the file is deleted.
            If it represents a folder, the folder <b>and all it's content</b> is deleted.</para><para>
            If the physical item does not exist, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.Delete(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Permanently deletes the physical item, and raises events during the process.
            </summary>    
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the file is deleted.
            If it represents a folder, the folder <b>and all it's content</b> is deleted.</para><para>
            If the physical item does not exist, an exception is thrown.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be deleted.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be deleted, 
            reports how many items have been deleted and the total number of items that must be deleted.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while deleting an item, reports the 
            exception and allows to recover from the exception and continue deleting the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Deletes each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListDeleteCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair)">
            <summary>Deletes the item pair's current <see cref="T:Xceed.FileSystem.FileSystemItem"/>.</summary>
            <isnew>10/17/2006</isnew>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an <see cref="T:Xceed.FileSystem.ItemPair"/> object
            which contains the item to be deleted.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Copies the item to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            item will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly copied item.</returns>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately copied to the destination folder.</para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            copied to the destination.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being copied is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being copied.</para>
            <para><see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is called on the destination item; 
            therefore, the attributes and dates of the original item are applied to the destination item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Copies the item to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            item will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly copied item.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately copied to the destination folder.</para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            copied to the destination.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being copied is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being copied.</para>
            <para><see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is called on the destination item; 
            therefore, the attributes and dates of the original item are applied to the destination item.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be copied, reports how many 
            items have been copied and the total number of items that must be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            copied for the current item, as well as for the entire set of items that are being copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while copying an item, reports the 
            exception and allows to recover from the exception and continue copying the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BeginCopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.EndCopyTo(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCopyTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Copies each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list to each
            item's destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the target 
            item of the <b>first</b> <see cref="T:Xceed.FileSystem.ItemPair"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListCopyToCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair,System.Boolean)">
            <summary>
            Copies the item pair's current <see cref="T:Xceed.FileSystem.FileSystemItem"/> to its target <see cref="T:Xceed.FileSystem.FileSystemItem"/>.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to an <see cref="T:Xceed.FileSystem.ItemPair"/> object
            which contains the <see cref="T:Xceed.FileSystem.FileSystemItem"/> to be copied and its eventual target.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Moves the item to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the item will be moved. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly moved item.</returns>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately moved to the destination folder. </para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            moved to the destination. </para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being moved is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being moved.</para>
            <para><see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is called on the destination item; 
            therefore, the attributes and dates of the original item are applied to the destination item.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean)">
            <summary>
            Moves the item to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the item will be moved. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly moved item.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>If this <see cref="T:Xceed.FileSystem.FileSystemItem"/> object represents a file, the physical file
            is immediately moved to the destination folder. </para><para>
            If it represents a folder, the folder <b>and all it's content</b> (files and subfolders) is immediately 
            moved to the destination. </para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="true"/>, any item in the destination that 
            has the same name as an item being moved is automatically replaced.</para><para>
            When <paramref name="replaceExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains an item with the same name as an item being moved.</para>
            <para><see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/> is called on the destination item; 
            therefore, the attributes and dates of the original item are applied to the destination item.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for items to be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be moved, 
            reports how many items have been moved and the total number of items that must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            moved for the current item, as well as for the entire set of items that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving an item, reports the 
            exception and allows to recover from the exception and continue moving the items.</event>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListMoveTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Moves each item in the <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object's list to each
            item's destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <returns>A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the target 
            item of the <b>last</b> <see cref="T:Xceed.FileSystem.ItemPair"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ListMoveToCore(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.ItemPair,System.Boolean)">
            <summary>
              Moves the item pair's current <see cref="T:Xceed.FileSystem.FileSystemItem"/> to its
              target <see cref="T:Xceed.FileSystem.FileSystemItem"/>.
            </summary>
            <isnew>10/17/2006</isnew>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            responsible for raising all events that occur during the process.</param>
            <param name="currentItemPair">A reference to a <see cref="T:Xceed.FileSystem.ItemPair"/> object
            which contains the <see cref="T:Xceed.FileSystem.FileSystemItem"/> to be moved and its eventual target.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ToString">
            <summary>
            Returns the full name of the item.
            </summary>
            <returns>A string that represents the full name of the item.</returns>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.FullName"/>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item.
            </summary>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current
            item's properties must be copied. Cannot be <see langword="null"/>.</param>
            <remarks><para>
            Only the values of the <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, <see cref="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime"/>,
            <see cref="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime"/> and <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> properties will
            be copied.</para><para>
            If the current item does not exist, its cached properties are copied to the destination. If it does exist, 
            its physical properties are copied.</para><para>
            If the target item does not exist, it caches the values of the properties. If it does exist, 
            its physical properties are changed immediately.</para><para>
            This method only copies the properties that are supported by the source and target items. No exception 
            will be thrown if one of the items does not support one of the copied properties.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before calling this 
            method. This method will always copy the up-to-date property values to the target item.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current 
            item's properties must be copied. Cannot be <see langword="null"/>.</param>
            <remarks><para>
            Only the values of the <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, <see cref="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime"/>,
            <see cref="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime"/> and <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> properties will
            be copied.</para><para>If the current item does not exist, its cached properties are 
            copied to the destination. If it does exist, its physical properties are copied.</para><para>
            If the target item does not exist, it caches the values of the properties. 
            If it does exist, its physical properties are changed immediately.</para><para>
            This method only copies the properties that are supported by the source and 
            target items. No exception will be thrown if one of the items does not support 
            one of the copied properties.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be 
            called before calling this method. This method will always copy the up-to-date 
            property values to the target item.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item.
            </summary>    
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>When a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object's properties, such as
            <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/> or <see cref="P:Xceed.FileSystem.FileSystemItem.CreationDateTime"/>, 
            are first accessed, a snapshot of the underlying physical item's properties should
            be taken. This snapshot should <b>not</b> be automatically updated whenever the 
            physical item's properties change.</para><para>
            <see langword="Refresh"/> should re-read the information from the physical item and 
            updates the snapshot.</para>
            <note type="inheritinfo"><see langword="Refresh"/> should be called before accessing a property,
            or the information returned could be outdated.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical item represented by the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            If the parents of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object do not exist
            upon creation of the item, an exception should be thrown.</para><para>
            If an exception is thrown during the creation of the item, the physical item should 
            not be deleted automatically.
            </para></remarks>    
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.EnsureDateIsValid(System.DateTime)">
            <summary>
            Ensures that the <see cref="T:System.DateTime"/> value is valid. 
            </summary>
            <param name="value">The <see cref="T:System.DateTime"/> value to validate.</param>
            <remarks><note type="inheritinfo">
            This method should be overridden only in the case where the physical item
            ( file or folder ) supports a specific date/time interval for our <see cref="T:System.DateTime"/>
            values ( creation, modified, accessed ). In that case, <see cref="F:System.DateTime.MinValue"/> should
            be supported since it indicates that no date was specified.
            </note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <remarks><para>
            If this method is called for an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object, all 
            children should have been previously deleted or the folder be empty or an exception
            should be thrown.</para><para>
            All metadata ( attributes, size, etc... ) associated with the <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object should be reset to their default values after the item is deleted.
            </para></remarks>     
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the item to another folder. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            item will be copied. Should not be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>    
            <remarks><para>
            If the destination does not exists, it should be created.
            </para><para>
            If an error occurs during the copying process of a file, the destination should not 
            be automatically deleted.
            </para><para>
            If the destination is created during the process, the metadata of the source item
            should be applied to the destination by calling <see cref="M:Xceed.FileSystem.FileSystemItem.ApplyPropertiesTo(Xceed.FileSystem.FileSystemItem)"/>.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesFrom(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <exclude/>
            <summary>
            This method is reserved for internal use and is not intended to be used directly from your code.
            </summary>
            <param name="session"></param>
            <param name="sourceItem"></param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.DoApplyPropertiesTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Copies the item's properties to another item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="targetItem">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to which the current 
            item's properties must be copied. Should not be <see langword="null"/>.</param>
            <remarks><note type="inheritinfo">
            This method should be overridden only in the case where the physical item
            ( file or folder ) supports specific meta-data ( other than attributes, dates, 
            size, etc... ). The override should eventually call the base implementation in order to
            address the regular FileSystemItem meta-data.
            </note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target items represent the same physical entity.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination item.</param>
            <remarks><para>
            If the target item is <see langword="null"/>, this method should return <see langword="false"/>
            </para></remarks>
            <returns><see langword="true"/> if the source and target <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects 
            represent the same physical entity; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted in the environment
            of the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object we are dealing with.
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> if the path is rooted; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <remarks><para>
            This method is overridden in both the <see cref="T:Xceed.FileSystem.AbstractFolder"/> and
            <see cref="T:Xceed.FileSystem.AbstractFile"/> classes and <b>does not</b> need to be overridden in more
            specific implementations.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemItem.BuildListForCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Handles the special cases in regards to building the list of items to process
            when creating a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HostedFullName">
            <summary>
            Gets a human-readable full pathname representing the fully qualified path of all host files 
            containing the item and the path of the item itself.
            </summary>
            <value>A string representing a human-readable full pathname representing the fully qualified 
            path of all host files (using their HostedFullName properties) containing the item and the path 
            of the item (using its FullName property).</value>
            <remarks>The full pathname returned is useful for displaying a more meaningful filename to the user.</remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HostFile">
            <summary>
            Gets an <see cref="T:Xceed.FileSystem.AbstractFile"/> containing an archived version of this <see cref="T:Xceed.FileSystem.FileSystemItem"/>.
            </summary>
            <value><see langword="null"/> if this FileSystemItem directly comes from a file system (disk drive, ftp server, memory).</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Name">
            <summary>
            Gets or sets the filename, without path, of the item.
            </summary>
            <value>A string that represents the filename, without path, of the item.</value>
            <remarks><para>
            When assigning a new name to this property, the physical item is
            immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created.
            In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The name of an item must <b>not</b> end with a path separator
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.FullName">
            <summary>
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The full name consists of the item's name fully-qualified with a path. For example: "c:\folder\file.txt", 
            "c:\folder\".</para><para>
            If the item represents a file, its name does <b>not</b> end with a path separator character.</para><para>
            If the item represents a folder, its name <b>does</b> end with a path separator character.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/> and 
            <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasAttributes">
            <summary>
            Gets a boolean value indicating if the item supports attributes.
            </summary>
            <value><see langword="true"/> (default) if the item supports attributes; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasAttributes 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Attributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that represents the 
            attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately modified 
            if it exists. If it does not exist, the attributes are cached and will be applied whenever this item 
            is created.</para>
            <para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasAttributes"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.IO.FileAttributes.Normal"/> and <see cref="F:System.IO.FileAttributes.Directory"/> while the setter
            throws a <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.
            </para><para>
            Keep in mind that even if <see cref="P:Xceed.FileSystem.FileSystemItem.HasAttributes"/> returns <see langword="true"/>, it is not 
            guaranteed that all the attributes are supported. The non-supported attributes will simply be ignored.
            </para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or the 
            information returned could be outdated. </note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a creation date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a creating date and time;
            <see langword="false"/> otherwise.
            </value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasCreationDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.CreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately modified 
            if it exists. If it does not exist, the date is cached and will be applied whenever this 
            item is created.</para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasCreationDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or 
            the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last write date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a last write date and time;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasLastWriteDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be applied whenever this 
            item is created.</para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasLastWriteDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or the 
            information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.HasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last access date and time.
            </summary>
            <value><see langword="true"/> (default) if the item supports having a last access date and time;
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, HasLastAccessDateTime 
            returns <see langword="false"/>.</para></remarks>
            <seealso cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime"/>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.LastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately modified if 
            it exists. If it does not exist, the date is cached and will be applied whenever this item is created.</para><para>
            </para><para>
            If <see cref="P:Xceed.FileSystem.FileSystemItem.HasLastAccessDateTime"/> returns <see langword="false"/>, the getter returns 
            <see cref="F:System.DateTime.MinValue"/> while the setter throws a 
            <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/>.</para>
            <note type="caution"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing this property, or 
            the information returned could be outdated. </note></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.ParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, or 
            <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.RootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder at the root of the path of this 
            item, or <see langword="null"/> if a rootfolder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. On a physical disk, it is usually 
            represented by a drive letter ("C:\") or UNC root ("\\server\share\").</para><para>
            Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFolder"/> class may define a specialized class that 
            represents a root folder, exposing properties and methods that apply only to a root.</para><para>
            Therefore, the <see langword="RootFolder"/> property may return an <see cref="T:Xceed.FileSystem.AbstractFolder"/>
            instance that is in fact a specialized class representing the root. </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself, or a reference to a specialized object that represents the root 
            folder with more details.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.Exists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that needs to access the underlying 
            physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>), otherwise these methods will 
            throw an exception.</para>
            <note><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does <b>not</b> need to be called before accessing 
            this property. The property will always reflect the physical item's existence.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.InvalidChars">
            <summary>
            Gets the characters that are invalid in file and folder names.
            </summary>
            <value>An array of characters containing the characters that are 
            invalid in file and folder names.</value>    
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item, or null 
            (Nothing in Visual Basic) if this item does not support this interface.
            </summary>
            <remarks><P>Previous implementations of Xceed Zip for .NET (before 2.0.200) only 
            supported this interface via the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/>. Only 
            the root folder of a file system needed to implement this interface to support 
            it for every child.</P>
            <P>The default implementation does not break this behavior. It queries the 
            <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> for <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> 
            support.</P>
            <P>If a file system does not support this interface, it can override this
            property and simply return null (Nothing in Visual Basic). This will improve 
            performance by avoiding unnecessary access to the <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/>
            property.</P></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoName">
            <summary>
            Gets or sets the filename, without path, of the item. 
            </summary>
            <value>A string that represents the filename, without path, of the item.</value>
            <remarks><para>When assigning a new name to this property, the physical item should be
            immediately renamed if it exists. If it does not exist, the new name should be cached 
            and applied whenever this item is created. In either cases, if a physical 
            item with the same name already exists, an exception should be thrown.</para>
            <para>The filename, without path, of an item should not end with a path separator character 
            regardless of whether it represents a file or a folder.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoFullName">
            <summary>
            Gets the full name of the item. 
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>The full name should consist of the item's name fully-qualified 
            with a path. For example: "c:\folder\file.txt", "c:\folder\".</para><para>
            If the item represents a file, its name should not end with a path 
            separator character.</para><para>
            If the item represents a folder, its name should end with a path separator 
            character.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes">
            <summary>
            Gets a boolean value indicating if the item supports attributes.
            </summary>
            <value><see langword="true"/> if the item supports attributes; <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasAttributes returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/> values that 
            represents the attributes of the item.</value>
            <remarks><para>When changing the item's attributes through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the attributes should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose attributes; in this case, <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasAttributes"/> should 
            return <see langword="false"/> to prevent <see cref="P:Xceed.FileSystem.FileSystemItem.DoAttributes"/> from being called.
            </para><note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a creation date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a creation date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasCreationDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item. 
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>When changing the item's creation date through this property,
            the physical item should be immediately modified if it exists. If it does not 
            exist, the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a creation date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasCreationDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoCreationDateTime"/> from being called.</para><para>
            Other types of items that do expose a creation date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before accessing 
            this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last write date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a last write date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasLastWriteDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item. 
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>When changing the item's modification date through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a modification date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastWriteDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoLastWriteDateTime"/> from being called.</para><para>
            Other types of items that do expose a modification date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime">
            <summary>
            Gets a boolean value indicating if the item supports having a last access date and time.
            </summary>
            <value><see langword="true"/> if the item supports having a last access date and time; 
            <see langword="false"/> otherwise.</value>
            <remarks><para>
            If <see cref="P:Xceed.FileSystem.AbstractFolder.IsRoot"/> returns <see langword="true"/>, DoHasLastAccessDateTime returns 
            <see langword="false"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item. 
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>When changing the item's access date through this property,
            the physical item should be immediately modified if it exists. If it does not exist, 
            the date should be cached and applied whenever this item is created.</para><para>
            Some types of items may not expose a last access date and time; in this case, 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoHasLastAccessDateTime"/> should return <see langword="false"/> to prevent 
            <see cref="P:Xceed.FileSystem.FileSystemItem.DoLastAccessDateTime"/> from being called.</para><para>
            Other types of items that do expose a last access date and time may not have the 
            information available. In this case, <see cref="F:System.DateTime.MinValue"/> should be 
            returned.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> should be called before
            accessing this property, or the information returned could be outdated.</note></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item. 
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            that contains the item, or <see langword="null"/> if the item does not have
            a parent.</value>
            <remarks><para>If the current item is the root of a folder hierarchy, it has
            no parent folder. In this case, the <see langword="ParentFolder"/> property
            should return <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder at the root 
            of the path of this item, or <see langword="null"/> if a root folder is not 
            available.</value>   
            <remarks><para>A root folder should represent the starting point of a folder hierarchy. 
            On a physical disk, it is usually represented by a drive letter ("C:\") or UNC root 
            ("\\server\share\").</para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> 
            property should return a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property
            should return <see langword="null"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemItem.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists. 
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>This property should be evaluated before calling a method that
            needs to access the underlying physical item, otherwise an exception
            should be raised from the method.</para><para>The property should always
            reflect the physical item's existence.</para>
            <note type="inheritinfo"><see cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> does not need
            to be called before accessing this property. </note></remarks>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemItem.CopyToDelegate">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(System.String,System.Boolean)">
            <summary>
            Creates a new file in the folder.
            </summary>
            <param name="relativeName">Relative name of the new file.</param>
            <param name="replaceIfExists"><see langword="true"/> if the new file should replace an existing file; 
            <see langword="false"/> otherwise.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the newly created file.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path information, in which ".." 
            means "previous folder". For example: "folder/file.txt", "../file.txt", etc.</para><para>
            If a file named <paramref name="relativeName"/> already exist in the destination folder
            and <paramref name="replaceIfExists"/> is <see langword="false"/>, an exception is thrown. 
            If <paramref name="replaceIfExists"/> is <see langword="true"/>, the existing file is 
            replaced by the newly created one. </para><para>
            If the physical folder in which the new file is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the 
            newly created file.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String,System.Boolean)">
            <summary>
            Creates a new file in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param> 
            <param name="replaceIfExists"><see langword="true"/> if the new file should 
            replace an existing file; <see langword="false"/> otherwise.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the newly created file.</returns>
            <remarks><para>The <paramref name="relativeName"/> parameter can include 
            relative path information, in which ".." means "previous folder". 
            For example: "folder/file.txt", "../file.txt", etc.</para><para>
            If a file named <paramref name="relativeName"/> already exist in the destination 
            folder and <paramref name="replaceIfExists"/> is <see langword="false"/>, an 
            exception is thrown. If <paramref name="replaceIfExists"/> is 
            <see langword="true"/>, the existing file is replaced by the newly created one.
            </para><para>If the physical folder in which the new file is to be created
            does not exist, it is created.</para><para>The current property values 
            (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created file.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(System.String)">
            <summary>
            Creates a new folder in the folder.
            </summary>
            <param name="relativeName">Relative name of the new folder.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the newly created folder.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/subFolder", "../folder", etc.</para><para>
            If a folder named <paramref name="relativeName"/> already exist, this method does nothing.</para><para>
            If the physical folder in which the new folder is to be created does not exist, it is created.</para><para>
            The current property values (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly 
            created folder. </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Creates a new folder in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the new file.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the newly created folder.</returns>
            <remarks><para>The <paramref name="relativeName"/> parameter can include relative 
            path information, in which ".." means "previous folder". For 
            example: "folder/subFolder", "../folder", etc.</para><para>If a folder named 
            <paramref name="relativeName"/> already exist, this method does nothing.
            </para><para>If the physical folder in which the new folder is to be 
            created does not exist, it is created.</para><para>The current property values 
            (such as <see cref="P:Xceed.FileSystem.FileSystemItem.Attributes"/>) are applied to the newly created 
            folder.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents a file contained in the folder.
            </summary>
            <param name="relativeName">Relative name of the file to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the file named <paramref name="relativeName"/>.
            </returns><remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/file.txt", "../file.txt", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object for a file that exists, 
            as well as for a file that does not exist. Further, the folder on which this method 
            is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFile(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents a file 
            contained in the folder and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the file to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the file named 
            <paramref name="relativeName"/>.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/file.txt", 
            "../file.txt", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object
            for a file that exists, as well as for a file that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents a folder contained in the folder.
            </summary>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the folder named
            <paramref name="relativeName"/>.</returns><remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". For example: "folder/subFolder", "../folder", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object
            for a folder that exists, as well as for a folder that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolder(Xceed.FileSystem.FileSystemEvents,System.Object,System.String)">
            <summary>
            Returns an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents a folder contained in the folder 
            and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="relativeName">Relative name of the folder to retrieve.</param>
            <returns>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object representing the folder named 
            <paramref name="relativeName"/>.</returns>
            <remarks><para>
            The <paramref name="relativeName"/> parameter can include relative path
            information, in which ".." means "previous folder". 
            For example: "folder/subFolder", "../folder", etc.</para><para>
            This method allows to get a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object
            for a folder that exists, as well as for a folder that does not exist. Further,
            the folder on which this method is called may not exist.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of files contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if files contained in the subfolders should
            be returned; <see langword="false"/> if only files that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files
            that match the specified <paramref name="filters"/>.</returns>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is. By default, an <see cref="!:AndFilter"/>
                  is used.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>For more detailed information on how to use filters, please refer to the
              <b>Using filters</b> topic.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFiles(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of files contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if files contained in the subfolders should
            be returned; <see langword="false"/> if only files that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the list of files returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files
            that match the specified <paramref name="filters"/>.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is. By default, an <see cref="!:AndFilter"/>
                  is used.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
              <para>For more detailed information on how to use filters, please refer to the
              <b>Using filters </b> topic.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for files to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, 
            reports the exception and allows to recover from the exception and continue building the list of files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of folders contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if folders contained in the subfolders should
            be returned; <see langword="false"/> if only folders that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the
            list of folders returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders
            that match the specified <paramref name="filters"/>.</returns>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>
            <para>
            Note that when passing a string, for example "folder", as the folder to retrieve 
            in the <paramref name="filters"/> parameter, a <see cref="!:NameFilter"/> class
            will be created around the string. By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> of 
            the <see langword="NameFilter"/> class is <see cref="F:Xceed.FileSystem.FilterScope.File"/>. This means
            that only files will be filter and <b>all</b> folders will be returned.</para>
            <para>
            In order to filter folders, a <see cref="!:NameFilter"/> class needs to be constructed 
            around the string and the <see cref="T:Xceed.FileSystem.FilterScope"/> must be set to <see cref="F:Xceed.FileSystem.FilterScope.Folder"/>. 
            For example:</para><para><code>
            GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );
            </code></para>
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolders(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.Object[])">
            <summary>
            Returns a filtered list of folders contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if folders contained in the subfolders should
            be returned; <see langword="false"/> if only folders that are immediate children of the
            folder should be returned.</param>
            <param name="filters">An array of objects that can be used to filter the
            list of folders returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders
            that match the specified <paramref name="filters"/>.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para>    
            <para>
            Note that when passing a string, for example "folder", as the folder to retrieve 
            in the <paramref name="filters"/> parameter, a <see cref="!:NameFilter"/> class
            will be created around the string. By default, the <see cref="T:Xceed.FileSystem.FilterScope"/> of
            the <see langword="NameFilter"/> class is <see cref="F:Xceed.FileSystem.FilterScope.File"/>. This means
            that only files will be filter and <b>all</b> folders will be returned.</para><para>
            In order to filter folders, a <see cref="!:NameFilter"/> class needs to be constructed 
            around the string and the <see cref="T:Xceed.FileSystem.FilterScope"/> must be set to 
            <see cref="F:Xceed.FileSystem.FilterScope.Folder"/>. For example:</para>
            <para><code>
            GetFolders( true, new NameFilter( "folder", FilterScope.Folder ) );
            </code></para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for folders to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, 
            reports the exception and allows to recover from the exception and continue building the list of folders.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(System.Boolean)">
            <summary>
            Returns a list of items contained in the folder.
            </summary>
            <param name="recursive"><see langword="true"/> if items contained in the subfolders should
            be returned; <see langword="false"/> if only items that are immediate children of the
            folder should be returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the items contained in the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetItems(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>
            Returns a list of items contained in the folder, and raises events during the process.
            </summary>
            <param name="recursive"><see langword="true"/> if items contained in the subfolders should
            be returned; <see langword="false"/> if only items that are immediate children of the
            folder should be returned.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the items contained in the folder.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"> A folder is being scanned for items to be returned.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while scanning a folder, reports 
            the exception and allows to recover from the exception and continue building the list of items.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Copies the folder's content to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be copied. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained in the subfolders 
            should be copied; <see langword="false"/> if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/>
            does not exist, it is created.</para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately copied to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being copied is automatically replaced.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains a file with the same name as a file being copied.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CopyFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Copies the folder's content to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be copied. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained in the subfolders 
            should be copied; <see langword="false"/> if only the current folder's content should be copied.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should be 
            replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be copied.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <remarks>
            <para>
            If the physical folder specified by <paramref name="destinationFolder"/>
            does not exist, it is created.</para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately copied to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being copied is automatically replaced.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>, an exception is thrown whenever 
            the destination contains a file with the same name as a file being copied.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time a file is about to be copied, reports how many 
            files have been copied and the total number of files that must be copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            copied for the current file, as well as for the entire set of files that are being copied.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">An exception occurs while copying a file, reports the 
            exception and allows to recover from the exception and continue copying the files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.BeginCopyFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.AsyncCallback,System.Object,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.EndCopyFilesTo(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Moves the folder's content to another folder.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be moved. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained 
            in the subfolders should be moved; <see langword="false"/> if only the current folder's content 
            should be moved.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should 
            be replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
            <remarks><para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately moved to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being moved is automatically replaced.
            </para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>,
            an exception is thrown whenever the destination contains a file
            with the same name as a file being moved.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.MoveFilesTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFolder,System.Boolean,System.Boolean,System.Object[])">
            <summary>
            Moves the folder's content to another folder, and raises events during the process.
            </summary>
            <param name="destinationFolder">An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object into which the
            folder's content must be moved. Cannot be <see langword="null"/>.</param>
            <param name="recursive"><see langword="true"/> if the content of the folders contained 
            in the subfolders should be moved; <see langword="false"/> if only the current folder's content 
            should be moved.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing files in the destination should 
            be replaced; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the items to be moved.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <remarks>
            <para>
            If the physical folder specified by <paramref name="destinationFolder"/> does not exist, it is created.
            </para><para>
            The folder's content (files and subfolders) that matches the provided <paramref name="filters"/> is 
            immediately moved to the destination.</para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="true"/>, any
            file in the destination that has the same name as a file being moved is automatically replaced.
            </para><para>
            When <paramref name="replacingExistingFiles"/> is <see langword="false"/>,
            an exception is thrown whenever the destination contains a file
            with the same name as a file being moved.</para>
            <para>To filter a list of files or folders, you can pass a variable number of objects
            in the <paramref name="filters"/> parameter. These objects may be of the following types:</para><para>
            <list type="table">
              <listheader>
                <term>Object type</term>
                  <description>Type of filter applied</description>
              </listheader>
              <item>
                <term><see cref="T:System.String"/></term>
                  <description>The string is assumed to be a file mask, and a <see cref="!:NameFilter"/> object 
                  is automatically created for the passed string, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> 
                  as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:System.IO.FileAttributes"/></term>
                  <description>A <see cref="!:AttributeFilter"/> object is automatically created for the provided
                  attributes, with <see cref="F:Xceed.FileSystem.FilterScope.File"/> as the default FilterScope.</description>
              </item>
              <item>
                <term><see cref="T:Xceed.FileSystem.Filter"/></term>
                  <description>The provided <see cref="T:Xceed.FileSystem.Filter"/> object is used as-is.</description>
              </item>
              <item>
                <term>Array of <see cref="T:System.Object"/></term>
                  <description>Each object in the array may be of the types described in this table, and is 
                  used accordingly.</description>
              </item>
              <item>
                <term>Other</term>
                  <description>If any other type is found, an exception is thrown.</description>
              </item></list></para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder">A folder is being scanned for files to be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an file is about to be moved, reports how many 
            files have been moved and the total number of files that must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must be 
            moved for the current file, as well as for the entire set of files that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving a file, reports the 
            exception and allows to recover from the exception and continue moving the files.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.CreateTempFile">
            <summary>
            Creates the temporary file.
            </summary>
            <returns>A reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object representing the temporary file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the folder to another folder. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            folder will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFileFromRelativeName(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="relativeName"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.GetFolderFromRelativeName(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="relativeName"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFiles(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>  
            Retrieves an array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFile"/> objects representing the files contained
            within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolders(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Retrieves an array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects representing the folders contained
            within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetItems(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.  
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            processed; <see langword="false"/> otherwise.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the files and 
            folders contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetChildItems(Xceed.FileSystem.FileSystemEventsSession)">
            <summary> 
            Retrieves an array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <returns>An array of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects representing the
            items ( files and folders ) contained within the folder.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFile(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>   
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="fileName">The name of the file to retrieve.</param>
            <remarks><para><paramref name="fileName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>Should return a reference to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object 
            regardless if the file represented by the object exists or not.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFolder.DoGetFolder(Xceed.FileSystem.FileSystemEventsSession,System.String)">
            <summary>
            Retrieves a reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="folderName">The name of the folder to retrieve.</param>
            <remarks><para><paramref name="folderName"/> should not end with a 
            <see cref="F:System.IO.Path.DirectorySeparatorChar"/>.</para></remarks>
            <returns>Should return reference to an <see cref="T:Xceed.FileSystem.AbstractFolder"/> object regardless 
            if the folder represented by the object exists or not.</returns>
        </member>
        <member name="F:Xceed.FileSystem.AbstractFolder.m_isRoot">
            <summary>
            Identifies if this folder is a root folder.
            </summary>
            <remarks><para>
            <b>Notes to inheritors:</b> The constructors of derived classes should set this field to 
            <see langword="true"/> if they represent the root folder.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.IsRoot">
            <summary>
            Gets a value indicating if the folder is a root folder.
            </summary>
            <value><see langword="true"/> if the folder is a root folder; <see langword="false"/> otherwise.</value>
            <remarks><para>
            See <see cref="P:Xceed.FileSystem.FileSystemItem.RootFolder"/> for more information about root folders.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFolder.DoIsRoot">
            <summary>
            Gets a boolean value indicating if the folder is a root folder.
            </summary>
            <value><see langword="true"/> if the folder represented by the 
            <see cref="T:Xceed.FileSystem.AbstractFolder"/> class is a root folder; <see langword="false"/> otherwise.</value>    
        </member>
        <member name="T:Xceed.FileSystem.AbstractFolder.CopyFilesToDelegate">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.IBatchUpdateable">
            <summary>
            Allows a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to optimize its updates,
            by modifying its underlying physical store only once.
            </summary>
            <remarks><para>
            This interface is usually implemented by a root folder.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate">
            <summary>
            Prevents a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object from modifying its
            underlying physical store until the EndUpdate method
            is called.
            </summary>
            <remarks><para>
            A call to <see langword="BeginUpdate"/>  <b>must</b> be accompanied by a subsequent
            call to EndUpdate, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.BeginUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Prevents a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object from modifying its underlying physical 
            store until the EndUpdate method is called and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            A call to <see langword="BeginUpdate"/>  <b>must</b> be accompanied by a subsequent
            call to EndUpdate, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate">
            <summary>
            Informs a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to apply to its underlying
            physical store all the modifications that have been made since the call
            to BeginUpdate.
            </summary>
            <remarks><para>
            A call to <see langword="EndUpdate"/>  <b>must</b> be preceded by a
            call to BeginUpdate, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.IBatchUpdateable.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Informs a <see cref="T:Xceed.FileSystem.AbstractFolder"/> object to apply to its underlying
            physical store all the modifications that have been made since the call
            to BeginUpdate and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            A call to <see langword="EndUpdate"/>  <b>must</b> be preceded by a
            call to BeginUpdate, or desynchronization can occur. One mean
            of making sure that both calls stay synchronized is to use a <see langword="finally"/>
            block:
            </para><para>
            <code>
            try 
            {
              i.BeginUpdate();
              // Do some modifications to the folder
            }
            finally 
            {
              i.EndUpdate();
            }
            </code>
            </para><para>
            In C#, the preferred way is to use the <see cref="T:Xceed.FileSystem.AutoBatchUpdate"/> class
            in a <see langword="using"/> statement.
            </para></remarks>
        </member>
        <member name="M:Xceed.Http.IMultipartItem.OnItemApplyPropertiesFrom(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.IMultipartItem.OnItemDoOpenWrite(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.IMultipartItem.OnDoDelete(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.Initialize(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.HttpOptions">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.CreateHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.HttpWebRequest">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.Stream">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.CachedStream">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.BinaryUploadSupported">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.Item">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.SourceItem">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.ReferenceCount">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.ByteBuffer">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.StreamLength">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormData.Boundary">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.ListCopyTo(Xceed.FileSystem.FileSystemEventsSession,System.Boolean)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="replaceExistingFiles"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.WriteEncoded(System.String,System.IO.Stream,System.Text.Encoding)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.BeginUpdate">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.BeginUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.EndUpdate">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object,System.Net.HttpStatusCode@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.EndUpdate(Xceed.FileSystem.FileSystemEvents,System.Object,System.Net.HttpWebRequest@,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.Xceed#Http#IMultipartItem#OnItemApplyPropertiesFrom(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnItemApplyPropertiesFrom(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.Xceed#Http#IMultipartItem#OnItemDoOpenWrite(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnItemDoOpenWrite(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.Xceed#Http#IMultipartItem#OnDoDelete(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnDoDelete(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.ShouldUseBase64(Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.CreateRequestStream(System.Net.HttpWebRequest,Xceed.FileSystem.FileSystemEventsSession,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.PrepareItemWriteStream(Xceed.FileSystem.FileSystemEventsSession,Xceed.Http.HttpOptions,System.IO.Stream)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnItemWriteStreamClose(Xceed.Http.HttpStream,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.WriteHeader(System.IO.Stream,System.Text.Encoding,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.WriteFooter(System.IO.Stream,System.Text.Encoding,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.GetItemHeaders(System.Collections.Generic.Dictionary{System.String,System.String},Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.WriteItemHeader(Xceed.FileSystem.FileSystemItem,System.Collections.Generic.Dictionary{System.String,System.String},System.IO.Stream,System.Text.Encoding,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.WriteItemFooter(Xceed.FileSystem.FileSystemItem,System.IO.Stream,System.Text.Encoding,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnBuildingHttpWebRequest(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormData.OnNewHttpWebRequestWriteStream(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.MultipartFormData.Url">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.MultipartFormData.BatchUpdateable">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.MultipartFormData.DoName">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.MultipartFormData.DoFullName">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.CreateHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.OnBuildingHttpWebRequest(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.GetItemHeaders(System.Collections.Generic.Dictionary{System.String,System.String},Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem,Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.OnItemDoOpenWrite(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.PrepareItemWriteStream(Xceed.FileSystem.FileSystemEventsSession,Xceed.Http.HttpOptions,System.IO.Stream)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.OnNewHttpWebRequestWriteStream(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedMultipartFormData.OnItemWriteStreamClose(Xceed.Http.HttpStream,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.EventHandlerList">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.EventHandlerList.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.EventHandlerList.AddHandler(System.Object,System.Delegate)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.EventHandlerList.AddHandlers(Xceed.Utils.Silverlight.EventHandlerList)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.EventHandlerList.Item(System.Object)">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpAsyncResult">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpAsyncResult.#ctor(Xceed.Http.Uploader.HttpAsyncState)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.Uploader.HttpAsyncResult.State">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpAsyncResult.AsyncState">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpAsyncResult.AsyncWaitHandle">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpAsyncResult.CompletedSynchronously">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpAsyncResult.IsCompleted">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpAsyncState">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpAsyncState.Reset">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpOptions">
            <summary>
            Represents the options used for the HTTP upload.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpOptions.#ctor">
            <summary>
            Initializes a new instance of the HttpOptions class.
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpOptions.#ctor(Xceed.Http.CompressionMethod)">
            <summary>
            Initializes a new instance of the HttpOptions class using the provided compression method.
            </summary>
            <param name="compressionMethod">A CompressionMethod value indicating the type of compression 
            to use for the HTTP upload.</param>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.Default">
            <summary>
            Gets the default HttpOptions settings.
            </summary>
            <value>An HttpOptions object representing the default settings.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.Boundary">
            <summary>
            Gets or sets the encapsulation boundary that will be used to indicate the start of a "body part" in a multiple part message.
            </summary>
            <value>A string containing the encapsulation boundary that will be used to indicate the start of the "body parts" in a multiple 
            part message, as well as the closing after the final body part.</value>
            <remarks>If not set explicitly, a value of "-----------------------------56292688921240" is returned.</remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.HttpWebRequestHeaders">
            <summary>
            Gets a collection of custom headers in the HTTP request.
            </summary>
            <value>An IDictionary object representing the custom headers used in the HTTP request.</value>
            <remarks><para>The custom headers stored in the collection are applied to the entire HTTP request.</para> 
            <para>To use custom headers with individual items, use ItemHeaders.</para></remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.ItemHeaders">
            <summary>
            Gets a collection of item headers that will be used in the HTTP request.
            </summary>
            <value>A reference to an IDictionary object representing the item headers that will be used 
            in the HTTP request.</value>
            <remarks><para>The custom headers stored in the collection are applied to individual items in the HTTP request.</para>
            <para>To use custom headers that apply to the entire HTTP request, use HttpWebRequestHeaders.</para></remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.DataEncodingMode">
            <summary>
            Gets or sets the data encoding mode that will be used for the HTTP upload.
            </summary>
            <value>A DataEncodingMode value indicating the encoding mode used for the HTTP upload.</value>
            <remarks>When this property is set to Auto, the component will determine the most appropriate encoding mode to use 
            based on the browser in which the Silverlight application is hosted.</remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.CompressionMethod">
            <summary>
            Gets or sets the compression method that will be used for the HTTP upload.
            </summary>
            <value>A CompressionMethod value indicating the method of compression used for the HTTP upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.CompressionLevel">
            <summary>
            Gets or sets the compression level used for the HTTP upload.
            </summary>
            <value>A CompressionLevel value indicating the level of compression used for the HTTP upload.</value>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpOptions.Properties">
            <summary>
            Gets a collection of property names whose values have been explicitly set as well as the corresponding values.
            </summary>
            <value>A reference to an object that implements the IDictionary interface.</value>
        </member>
        <member name="T:Xceed.Http.Uploader.HttpUploader">
            <summary>
            Represents an object used to perform file uploads using the HTTP protocol.
            </summary>
            <remarks>The HttpUploader class exposes several static and instance methods. The static methods are the 
            preferred way of performing uploads.</remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the HttpUploader class using a string.
            </summary>
            <param name="url">A string representing the URL that will be used for the HTTP upload. Cannot be null.</param>
            <remarks><para>The URL used to create the instance is passed as is to the methods that create an HTTP connection. 
            As a result, the Url value is subject to the limitations of the Silverlight API.</para>
            <para>Cross-domain connections are not currently supported.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the HttpUploader class using a Uri object.
            </summary>
            <param name="url">A Uri object representing the URL that will be used for the HTTP upload. Cannot be null.</param>
            <remarks><para>The URL used to create the instance is passed as is to the methods that create an HTTP connection. 
            As a result, the Url value is subject to the limitations of the Silverlight API.</para>
            <para>Cross-domain connections are not currently supported.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.IO.Stream,System.String,System.String)">
            <summary>
            Asynchronously uploads a file represented by a stream, or adds it to a batch in memory if uploads are deferred.
            </summary>
            <param name="stream">The stream whose content will be uploaded or added to the batch in memory. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted to the HTTP server. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, calls to this 
            method will cause the data to be accumulated in memory instead of being uploaded. The actual transfer will only occur 
            when the BeginPerformUploads/EndPerformUploads methods are called. When not in batch mode, the transfer is performed by 
            BeginUploadFile and occurs immediately.</para>
            <para>When uploads are deferred, only one upload operation is permitted at a time. An InvalidOperationException 
            will be thrown if you attempt to start a new deferred asynchronous upload while another hasn't completed yet. This restriction 
            does not apply to the static upload methods.</para>
            <para>This method calls a default callback method that will call EndUploadFile. As a result, you must not call EndUploadFile 
            yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create them. If name is null, "String" or "File" followed by a 
            counter will be used. If fileName is null, "File" followed by a counter and ".dat" will be used.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.IO.Stream,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a file represented by a file stream, or adds it to a batch in memory if uploads 
            are deferred using the provided options, events, and callback.
            </summary>
            <param name="stream">The stream whose content will be uploaded or added to the batch in memory.</param>
            <param name="name">A string representing the control name that will be submitted to the HTTP server. Can be null.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted to the HTTP server. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">An object containing state information for this operation. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, calls to this 
            method will cause the data to be accumulated in memory instead of being uploaded. The actual upload will only 
            occur when the BeginPerformUploads/EndPerformUploads methods are called.</para>
            <para>When uploads are deferred, only one upload operation is permitted at a time. An InvalidOperationException 
            will be thrown if you attempt to start a new deferred asynchronous upload while another hasn't completed yet. This 
            restriction does not apply to the static upload methods.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use. If name is null,  "String" or 
            "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and ".dat" will be used.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFile in that method, 
            or desynchronization can occur. If you pass null to the asyncCallback parameter, a default callback is used with 
            this method, in which the appropriate "End" method is called. In this case, you must not call EndUploadFiles yourself.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.IO.Stream,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a file represented by a file stream, or adds it to a batch in memory if uploads are deferred, using the provided options, events, and callback.
            </summary>
            <param name="stream">The stream whose content will be uploaded or added to the batch in memory.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted to the HTTP server. Can be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the event handler when an event is raised. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks><para>If DeferUploads is called on the HttpUploader object before this instance method is called, calls to this method 
            will cause the data to be accumulated in memory asynchronusly instead of being uploaded. The actual transfer will only occur when 
            the BeginPerformUploads/EndPerformUploads methods are called. When not in batch mode, the transfer is performed by BeginUploadFile 
            and occurs immediately. Furthermore, when uploads are deferred, only one upload operation is permitted at a time. An InvalidOperationException 
            will be thrown if you attempt to start a new deferred asynchronous upload while another hasn't completed yet. This 
            restriction does not apply to the static upload methods.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFile in that method and 
            properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, a default callback 
            is used with this method, in which the appropriate "End" method is called. In this case, you must not call 
            EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If name is 
            null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and ".dat" will 
            be used. If either parameter is an empty string, its corresponding field will not be included in the HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.Uri,System.IO.Stream,System.String,System.String)">
            <summary>
            Asynchronously uploads a file represented by a stream using the provided URL.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="stream">The stream whose content will be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted to the HTTP server. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>This method calls a default callback method that calls EndUploadFile. As a result, 
            you must not call EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP 
            request. If name is null, "File" followed by a counter will be used. If fileName is null, 
            "File" followed by a counter and ".dat" will be used. If either parameter is an empty 
            string, its corresponding field will not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url 
            parameter is subject to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.Uri,System.IO.Stream,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a file represented by a stream using the provided URL and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. 
            <param name="stream">The stream whose content will be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. 
            Can be null.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted to the 
            HTTP server. Can be null.</param>
            Cannot be null.</param>
            <param name="asyncCallback">An AsyncCallback object representing the method to be called when the 
            asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the 'asyncCallback' when it 
            is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. 
            If name is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a 
            counter and ".dat" will be used. If either parameter is an empty string, its corresponding field will 
            not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the Url value is subject 
            to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFile in that 
            method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. In this case, 
            you must not call EndUploadFile yourself; otherwise, an exception will be thrown.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(System.Uri,System.IO.Stream,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a file represented by a stream using the provided URL, options, events, and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be 
            uploaded. Cannot be null.</param>
            <param name="stream">The stream whose content will be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the 
            HTTP server. Can be null.</param>
            <param name="fileName">A string representing the suggested filename that will be submitted 
            to the HTTP server. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression
            method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an 
            event is raised. Can be null.</param>
            <param name="asyncCallback">An AsyncCallback object representing the method to be called 
            when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the 'asyncCallback' 
            when it is called. Can be null.</param>
            <returns>An IAsyncResult object that references this asynchronous upload operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFile 
            in that method and properly dispose of the 
            HttpWebResponse object. If you pass null to the asyncCallback parameter, a default callback is 
            used with this method, in which the appropriate "End" method is called. In this case, you must 
            not call EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP 
            request. If name is null, "File" followed by a counter will be used. If fileName is null, "File" 
            followed by a counter and ".dat" will be used. If either parameter is an empty string, its 
            corresponding field will not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the Url value is 
            subject to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFile(Xceed.Http.Uploader.HttpUploader,System.Uri,System.IO.Stream,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a file represented by a stream using the provided URL, options, 
            events, and callback.
            </summary>
            <param name="sender">An HttpUploader object that will perform the upload. Must be null 
            when called from a static method.</param>
            <param name="url">A Uri object representing the remote URL address where the file will 
            be uploaded. Cannot be null.</param>
            <param name="stream">The stream whose content will be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the 
            HTTP server. Can be null.</param>
            <param name="fileName">A string representing the suggested remote filename that will be 
            submitted to the HTTP server. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression 
            method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an 
            event is raised. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation 
            is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous 
            callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult object that references this asynchronous upload operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFile 
            in that method and properly dispose of the HttpWebResponse object. If you pass null to the 
            asyncCallback parameter, a default callback is used with this method, in which the appropriate 
            "End" method is called. In this case, you must not call EndUploadFile yourself; otherwise, an 
            exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP 
            request. If name is null, "File" followed by a counter will be used. If fileName is null, "File" 
            followed by a counter and ".dat" will be used. If either parameter is an empty string, its 
            corresponding field will not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter 
            is subject to the limitations of the Silverlight API. Currently, cross-domain connections are not 
            supported.</para>
            <para>This overload accepts all possible parameters to upload a file asynchronously. It is useful 
            when you derive from the HttpUploader class and expose your own overloads of BeginUploadFile.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started by BeginUploadFile.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <returns>An HttpWebResponse object or null.</returns>
            <remarks>
            <para>When uploads are deferred (DeferUploads has been called), the normal behavior of this method 
            is to return null. The HttpWebResponse is in this case retrieved by calling EndPerformUploads. If 
            uploads have not been deferred and this method returns null, it indicates that an error has occurred.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadFile method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadFile that has no callback parameter), a 
            default callback is used in which the appropriate "End" method is called. In this case, you must not 
            call EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned 
            by this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>This method should be used in conjunction with the instance versions of BeginUploadFile.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadFile(System.IAsyncResult,System.Object)">
            <summary>
            Completes the asynchronous operation started by BeginUploadFile.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <param name="reserved">Reserved for future use. Always pass <see langword="null"/>.</param>
            <returns>An HttpWebResponse object or null.</returns>
            <remarks>
            <para>If null is returned, this indicates that an error has occurred.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned 
            by this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadFile method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadFile that has no callback parameter), a default 
            callback is used in which the appropriate "End" method is called. In this case, you must not call 
            EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>This method should be used in conjunction with the static versions of BeginUploadFile.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.String,System.String)">
            <summary>
            Asynchronously uploads a string, or adds it to a batch in memory if uploads are deferred.
            </summary>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, 
            calls to this method will cause the data to be accumulated in memory asynchronously instead of being 
            uploaded. The actual transfer will only occur when the BeginPerformUploads/EndPerformUploads methods 
            are called. When not in batch mode, the transfer is performed by BeginUploadString and occurs immediately. 
            Furthermore, when uploads are deferred, only one upload operation is permitted at a time. An 
            InvalidOperationException will be thrown if you attempt to start a new deferred asynchronous upload while 
            another hasn't completed yet. This restriction does not apply to the static upload methods.</para>
            <para>This method calls a default callback method that calls EndUploadString. As a result, you must not 
            call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" followed by 
            a counter will be used. If an empty string is passed, its corresponding field will not be included in the 
            HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a string, or adds it to a batch in memory if uploads are deferred, using 
            the provided callback.
            </summary>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP 
            server. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is 
            completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback 
            method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, 
            calls to this method will cause the data to be accumulated in memory asynchronusly instead of being 
            uploaded. The actual transfer will only occur when the BeginPerformUploads/EndPerformUploads methods 
            are called. When not in batch mode, the transfer is performed by BeginUploadString and occurs 
            immediately. Furthermore, when uploads are deferred, only one upload operation is permitted at a 
            time. An InvalidOperationException will be thrown if you attempt to start a new deferred asynchronous 
            upload while another hasn't completed yet. This restriction does not apply to the static upload methods.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadString 
            in that method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback 
            parameter, a default callback is used with this method, in which the appropriate "End" method is 
            called. In this case, you must not call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" 
            followed by a counter will be used. If an empty string is passed, its corresponding field will not 
            be included in the HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a string, or adds it to a batch in memory if in batch mode if uploads 
            are deferred, using the provided options, events, and callback.
            </summary>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the 
            HTTP. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression 
            method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an 
            event is raised. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation 
            is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous 
            callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is 
            called, calls to this method will cause the data to be accumulated in memory asynchronously 
            instead of being uploaded. The actual upload will only occur when the BeginPerformUploads/EndPerformUploads 
            methods are called. When not in batch mode, the transfer is performed by BeginUploadString and 
            occurs immediately. Furthermore, when uploads are deferred, only one upload operation is permitted 
            at a time. An InvalidOperationException will be thrown if you attempt to start a new deferred 
            asynchronous upload while another hasn't completed yet. This restriction does not apply to the static upload methods.</para>
            <para>If you pass a callback to the asyncCallback parameter, you must call EndUploadString in 
            that callback, or desynchronization can occur. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. 
            In this case, you must not call EndUploadString yourself.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadString 
            in that method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback 
            parameter, a default callback is used with this method, in which the appropriate "End" method is called. 
            In this case, you must not call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" 
            followed by a counter will be used. If an empty string is passed, its corresponding field will not be 
            included in the HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.Uri,System.String,System.String)">
            <summary>
            Asynchronously uploads a string using the provided URL.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>This method calls a default callback method that calls EndUploadString. As a result, you must 
            not call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" 
            followed by a counter will be used. If an empty string is passed, its corresponding field will not 
            be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is 
            subject to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.Uri,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a string using the provided URL, events, options, and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be 
            uploaded. Cannot be null.</param>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP 
            server. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is 
            completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback 
            method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous operations 
            that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that you cannot block the current 
            thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback method. Once the upload 
            operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadString 
            in that method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback 
            parameter, a default callback is used with this method, in which the appropriate "End" method is 
            called. In this case, you must not call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" 
            followed by a counter will be used. If an empty string is passed, its corresponding field will not 
            be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is 
            subject to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(System.Uri,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a string using the provided URL, events, options, and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the asynchronous 
            operations that the component provides. The property IAsyncResult.AsyncWaitHandle will always return null. This means that 
            you cannot block the current thread until the current WaitHandle given by IAsyncResult.AsyncWaitHandle receives a signal. 
            Also, you cannot "busy wait" on the value of the property IAsyncResult.Completed waiting for it to change to true. Doing 
            so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a callback 
            method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadString in that method and 
            properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, a default callback is used 
            with this method, in which the appropriate "End" method is called. In this case, you must not call EndUploadString yourself; 
            otherwise, an exception will be thrown.</para>
            <para>When name is null, a naming algorithm will create it for use in the HTTP request: "String" followed by a counter will 
            be used. If an empty string is passed, its corresponding field will not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject to the limitations 
            of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadString(Xceed.Http.Uploader.HttpUploader,System.Uri,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a string using the provided using the provided HttpUploader, URL, options, events, and callback.
            </summary>
            <param name="sender">An HttpUploader object that will perform the upload. Must be null when called from a static method.</param>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="value">The string to be uploaded. Cannot be null.</param>
            <param name="name">A string representing the logical name that will be submitted to the HTTP server. Can be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level that 
            will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it 
            is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the 
            asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle will always 
            return null. This means that you cannot block the current thread until the current WaitHandle given by 
            IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the property 
            IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing a 
            callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadString in that 
            method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. In this case, 
            you must not call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>When name null, a naming algorithm will create it for use in the HTTP request: "String" followed by a 
            counter will be used. If an empty string is passed, its corresponding field will not be included in the HTTP 
            request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject 
            to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            <para>This overload is useful when you derive from the HttpUploader class and expose your own overloads of BeginUploadString.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadString(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started by BeginUploadString.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <returns>An HttpWebResponse object or null.</returns>
            <remarks>
            <para>When uploads are deferred (DeferUploads has been called), the normal behavior of this method is 
            to return null. The HttpWebResponse is in this case retrieved by calling EndPerformUploads. If uploads 
            have not been deferred and this method returns null, it indicates that an error has occurred.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadString method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadString that has no callback parameter), a 
            default callback is used in which the appropriate "End" method is called. In this case, you must not 
            call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned by 
            this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>This method should be used in conjunction with the instance versions of BeginUploadString.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadString(System.IAsyncResult,System.Object)">
            <summary>
            Completes the asynchronous operation started by BeginUploadString.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <param name="reserved">Reserved for future use. Always pass <see langword="null"/>.</param>
            <returns>An HttpWebResponse object or null.</returns>
            <remarks>
            <para>If null is returned, this indicates that an error has occurred.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned by 
            this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadString method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadString that has no callback parameter), a 
            default callback is used in which the appropriate "End" method is called. In this case, you must not 
            call EndUploadString yourself; otherwise, an exception will be thrown.</para>
            <para>This method should be used in conjunction with the instance versions of BeginUploadString.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload})">
            <summary>
            Asynchronously uploads a list of files represented by streams, or adds the files to a batch in memory if uploads are deferred.
            </summary>
            <param name="files">A list of FileToUpload objects representing the files that will be uploaded.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, calls to 
            this method will cause the data to be accumulated in memory asynchronously instead of being uploaded. The 
            actual transfer will only occur when the BeginPerformUploads/EndPerformUploads methods are called. When not 
            in batch mode, the transfer is performed by BeginUploadFiles and occurs immediately. Furthermore, when uploads 
            are deferred, only one upload operation is permitted at a time. An InvalidOperationException will be thrown 
            if you attempt to start a new deferred asynchronous upload while another hasn't completed yet. This restriction 
            does not apply to the static upload methods.</para>
            <para>This method calls a default callback method that calls EndUploadFiles. As a result, you must not call 
            EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create them for use in the HTTP request. If name 
            is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and ".dat" 
            will be used. If either parameter is an empty string, its corresponding field will not be included in the HTTP 
            request: do this at your own risk.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a list of files represented by streams, or adds the files to a batch in memory if uploads are deferred, using the provided callback.
            </summary>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, 
            calls to this method will cause the data to be accumulated in memory asynchronusly instead of being 
            uploaded. The actual transfer will only occur when the BeginPerformUploads/EndPerformUploads methods 
            are called. When not in batch mode, the transfer is performed by BeginUploadFiles and occurs immediately. 
            Furthermore, when uploads are deferred, only one upload operation is permitted at a time. An InvalidOperationException 
            will be thrown if you attempt to start a new deferred asynchronous upload while another hasn't completed 
            yet. This restriction does not apply to the static upload methods.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on 
            the asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle will 
            always return null. This means that you cannot block the current thread until the current WaitHandle 
            given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of 
            the property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by 
            providing a callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFiles in that
            method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. In this case, 
            you must not call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If name 
            is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and 
            ".dat" will be used. If either parameter is an empty string, its corresponding field will not be included 
            in the HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a list of files represented by streams, or adds the files to a batch in memory if if uploads are deferred, using the provided options, events, and callback.
            </summary>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>If DeferUploads is called on the HttpUploader object before this instance method is called, 
            "batch" mode will be used, meaning that calls to this method will cause the data to be accumulated 
            in memory instead of being uploaded. The actual upload will only occur when the BeginPerformUploads/EndPerformUploads 
            methods are called.</para>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on 
            the asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle will 
            always return null. This means that you cannot block the current thread until the current WaitHandle 
            given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of 
            the property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by 
            providing a callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback to the asyncCallback parameter, you must call EndUploadFiles in that 
            callback, or desynchronization can occur. If you pass null to the asyncCallback parameter, a default 
            callback is used with this method, in which the appropriate "End" method is called. In this case, you 
            must not call EndUploadFiles yourself.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If 
            name is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter 
            and ".dat" will be used. If either parameter is an empty string, its corresponding field will not be included 
            in the HTTP request: do this at your own risk.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Uri,System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload})">
            <summary>
            Asynchronously uploads a list of files represented by streams using the provided URL.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>This method calls a default callback method that calls EndUploadFiles. As a result, you must 
            not call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. 
            If name is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a 
            counter and ".dat" will be used. If either parameter is an empty string, its corresponding field will 
            not be included in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject to 
            the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Uri,System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a list of files represented by streams using the provided URL and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact 
            on the asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle 
            will always return null. This means that you cannot block the current thread until the current WaitHandle 
            given by IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the 
            property IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing 
            a callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFiles in that 
            method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. In this case, 
            you must not call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If name 
            is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and 
            ".dat" will be used. If either parameter is an empty string, its corresponding field will not be included 
            in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject 
            to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(System.Uri,System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a list of files represented by streams using the provided URL, options, events, and callback.
            </summary>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level 
            that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the 
            asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle will always 
            return null. This means that you cannot block the current thread until the current WaitHandle given by 
            IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the property 
            IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing 
            a callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFiles in that method 
            and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, a default 
            callback is used with this method, in which the appropriate "End" method is called. In this case, you must not 
            call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If name is 
            null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and ".dat" 
            will be used. If either parameter is an empty string, its corresponding field will not be included in the HTTP 
            request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject to 
            the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadFiles(Xceed.Http.Uploader.HttpUploader,System.Uri,System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously uploads a list of files represented by streams using the provided HttpUploader, URL, options, events, and callback.
            </summary>
            <param name="sender">An HttpUploader object that will perform the upload. Must be null when called from a static method.</param>
            <param name="url">A Uri object representing the remote URL address where the file will be uploaded. Cannot be null.</param>
            <param name="files">The FileToUpload objects whose stream content will be uploaded. Cannot be null.</param>
            <param name="options">An HttpOptions object representing options such as the compression method and level that will be used for the upload. Can be null.</param>
            <param name="events">An HttpEvents object that will be used to raise events. Can be null.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised. Can be null.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed. Can be null.</param>
            <param name="callbackUserData">Opaque data that will be passed back to the asynchronous callback method when it is called. Can be null.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>Silverlight does not currently completely support preemptive multi-tasking. This has an impact on the 
            asynchronous operations that the component provides. The property IAsyncResult.AsyncWaitHandle will always 
            return null. This means that you cannot block the current thread until the current WaitHandle given by 
            IAsyncResult.AsyncWaitHandle receives a signal. Also, you cannot "busy wait" on the value of the property 
            IAsyncResult.Completed waiting for it to change to true. Doing so will lock your application.</para>
            <para>This means that the only correct way to track when an asynchronous operation completes is by providing 
            a callback method. Once the upload operation completes, your callback method will be called.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndUploadFiles in that 
            method and properly dispose of the HttpWebResponse object. If you pass null to the asyncCallback parameter, 
            a default callback is used with this method, in which the appropriate "End" method is called. In this case, 
            you must not call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>When name or fileName is null, a naming algorithm will create one for use in the HTTP request. If name 
            is null, "File" followed by a counter will be used. If fileName is null, "File" followed by a counter and 
            ".dat" will be used. If either parameter is an empty string, its corresponding field will not be included 
            in the HTTP request: do this at your own risk.</para>
            <para>The URL is used as is by the method to create a connection. As a result, the url parameter is subject 
            to the limitations of the Silverlight API. Currently, cross-domain connections are not supported.</para>
            <para>This overload is useful when you derive from the HttpUploader class and expose your own overloads of BeginUploadFiles.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started by BeginUploadFiles.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <returns>An HttpWebResponse object or null.</returns>
            <remarks>
            <para>When uploads are deferred (DeferUploads has been called), the normal behavior of this method is 
            to return null. The HttpWebResponse is in this case retrieved by calling EndPerformUploads. If uploads 
            have not been deferred and this method returns null, it indicates that an error has occurred.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadFiles method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadFiles that has no callback parameter), a 
            default callback is used in which the appropriate "End" method is called. In this case, you must not 
            call EndUploadFiles yourself; otherwise, an exception will be thrown.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned by 
            this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>This method should be used in conjunction with the instance versions of BeginUploadFiles.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadFiles(System.IAsyncResult,System.Object)">
            <summary>
            Completes the asynchronous operation started by BeginUploadFile.
            </summary>
            <param name="asyncResult">Completes the asynchronous operation started by BeginUploadFile.</param>
            <param name="reserved">Reserved for future use. Always pass <see langword="null"/>.</param>
            <returns>Completes the asynchronous operation started by BeginUploadFile.</returns>
            <remarks>
            <para>If null is returned, this indicates that an error has occurred.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned 
            by this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            <para>If you pass a callback method to the asyncCallback parameter of this method's corresponding 
            BeginUploadFile method, you must call this method in the passed callback. If you pass null to the 
            asyncCallback parameter (or call a version of BeginUploadFile that has no callback parameter), a default 
            callback is used in which the appropriate "End" method is called. In this case, you must not call 
            EndUploadFile yourself; otherwise, an exception will be thrown.</para>
            <para>This method should be used in conjunction with the static versions of BeginUploadFiles.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultUploadFileCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultStaticUploadFileCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultUploadStringCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultStaticUploadStringCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultUploadFilesCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultStaticUploadFilesCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DeferUploads">
            <summary>
            Tells the HttpUploader object that uploads should be deferred until the BeginPerformUploads/EndPerformUploads 
            methods are called.
            </summary>
            <remarks>
            <para>Calling CancelDeferredUploads cancels deferred mode: the "BeginUpload" methods will immediately upload data 
            instead of waiting for BeginPerformUploads/EndPerformUploads to do the actual transfer.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DeferUploads(Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object)">
            <summary>
            Tells the HttpUploader object that uploads should be deferred until the BeginPerformUploads/EndPerformUploads 
            methods are called, raising events during the process and using the passed options.
            </summary>
            <param name="options">An HttpOptions object that contains the settings to be used during the batch upload.</param>
            <param name="events">An HttpEvents object that will be used to raise events.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks>
            <para>Calling CancelDeferredUploads cancels deferred mode: the "BeginUpload" methods will immediately upload data 
            instead of waiting for BeginPerformUploads/EndPerformUploads to do the actual transfer.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginPerformUploads">
            <summary>
            Asynchronously transfers data that has been accumulated while uploads are deferred.
            </summary>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>You must call DeferUploads before calling BeginPerformUploads; otherwise, an exception will be thrown.</para>
            <para>This method calls a default callback method that will call EndPerformUploads. As a result, 
            you must not call EndPerformUploads yourself; otherwise, an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginPerformUploads(System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfers data that has been accumulated while uploads are deferred using the passed callback.
            </summary>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="callbackUserData">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>You must call DeferUploads before calling BeginPerformUploads; otherwise, an exception will be thrown.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndPerformUploads in that method. 
            If you pass null to the asyncCallback parameter, a default callback is used with this method, in which the appropriate 
            "End" method is called. In this case, you must not call EndPerformUploads yourself; otherwise, an exception will be thrown.</para></remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginPerformUploads(Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfers data that has been accumulated while uploads are deferred using the passed events, options, callback, and user data objects.
            </summary>
            <param name="options">An HttpOptions object that contains the settings to be used during the batch upload.</param>
            <param name="events">An HttpEvents object that will be used to raise events.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="asyncCallback">Callback method to be called when the asynchronous operation is completed.</param>
            <param name="callbackUserData">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the status of the asynchronous operation.</returns>
            <remarks>
            <para>You must call DeferUploads before calling BeginPerformUploads; otherwise, an exception will be thrown.</para>
            <para>If you pass a callback method to the asyncCallback parameter, you must call EndPerformUploads in that method. 
            If you pass null to the asyncCallback parameter, a default callback is used with this method, in which the appropriate 
            "End" method is called. In this case, you must not call EndPerformUploads yourself; otherwise, an exception will be thrown.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndPerformUploads(System.IAsyncResult)">
            <summary>
            Retrieves the server's HttpWebResponse after data accumulated while uploads are deferred has been sent.
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation</param>
            <returns>An HttpWebResponse object or null if an error has occurred.</returns>
            <remarks>
            <para>You must call the DeferUploads method before calling this method.</para>
            <para>If you pass a callback to this method's corresponding BeginPerformUploads method, 
            you must call EndPerformUploads in that callback. If you pass null to BeginPerformUploads asyncCallback 
            parameter (or call the version with no parameters), a default callback is used with this method, in which 
            the appropriate "End" method is called. In this case, you must not call EndPerformUploads yourself; 
            otherwise, an exception will be thrown.</para>
            <para>It is your responsibility to call the Dispose method on the HttpWebResponse object returned by 
            this method. Failing to do so can cause your application to run out of memory or network connections.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.AbortUpload(System.IAsyncResult)">
            <summary>
            Aborts an asynchronous upload operation that is in progress
            </summary>
            <param name="asyncResult">An IAsyncResult representing the status of the asynchronous operation.</param>
            <returns>true if the upload has been marked to be aborted, false otherwise</returns>
            <remarks>
            <para>Only the buffering portion of an upload can be aborted. Once the upload request has been sent to the 
            Web browser, it cannot be aborted and the method will return false.</para>
            <para>Even if an upload is aborted, the callback method specified in its "Begin" (e.g., BeginUploadFiles) 
            method will be called, and the corresponding "End" method (e.g., EndUploadFiles) must be called from the 
            callback method.</para>
            <para>Calls to this method with expired IAsyncResult objects will be ignored and return false.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.CancelDeferredUploads">
            <summary>
            Cancels deferred-uploads mode.
            </summary>
            <returns>true if the request to cancel deferred-uploads mode succeeds; false otherwise.</returns>
            <remarks>
            <para>Calling this method places the HttpUploader object into "non-deferred" mode: the "BeginUpload" methods will immediately transfer data.</para>
            <para>If the object is not in deferred mode, false is returned. An exception will be thrown if the actual transfer is in progress when this 
            method is called. Verify that CurrentDeferredAsynchronousUpload is null before calling this method to avoid the exception.</para>
            </remarks>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.DefaultPerformUploadsCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadItem(Xceed.Http.Uploader.HttpUploader,Xceed.FileSystem.FileSystemItem,Xceed.Http.EncodedMultipartFormData,System.String,System.String,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadItem(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.BeginUploadItems(Xceed.Http.Uploader.HttpUploader,Xceed.FileSystem.AbstractFolder,Xceed.Http.EncodedMultipartFormData,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object,System.AsyncCallback,System.Object,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.EndUploadItems(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.CopyToCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.GetResponse(Xceed.Http.Uploader.HttpAsyncState,System.Net.HttpWebRequest,System.IO.Stream)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.GetResponseCallback(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.CompleteAsynchronousUpload(Xceed.Http.Uploader.HttpAsyncState,System.Boolean)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.PrepareUploadFiles(System.Uri,System.Collections.Generic.IEnumerable{Xceed.Http.Uploader.FileToUpload},Xceed.Http.Uploader.HttpUploader@,System.Boolean@,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.PopulateContentDispositionAttributes(Xceed.Http.Uploader.HttpUploader,Xceed.FileSystem.FileSystemItem,System.String@,System.String@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.CombineOptionsToEvents(Xceed.Http.EncodedMultipartFormData,Xceed.Http.Uploader.HttpOptions,Xceed.Http.Uploader.HttpEvents)">
            <summary>
            Stores the supplied Http.Uploader options into the Http.EncodedHttpOptions object
            embedded in the supplied events.
            
            If no events object is supplied, the default events object is used.
            </summary>
            <returns>The method returns the effective events object resulting from the operation.</returns>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.GetHttpAsyncState(System.IAsyncResult)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.MakeDisplayString(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.Uploader.HttpUploader.MakeDisplayString(Xceed.Http.Uploader.HttpAsyncState)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpUploader.Url">
            <summary>
            Gets or sets the URL that will be used for the HTTP upload.
            </summary>
            <value>A Uri object representing the URL that will be used for the upload.</value>
            <remarks>
            <para>The value cannot be null.</para>
            <para>The value cannot be changed while uploads are deferred (DeferUploads has been called on the HttpUploader instance).</para>
            <para>The URL used to create the instance is passed as is to the methods that create an HTTP connection. As a result, the Url 
            value is subject to the limitations of the Silverlight API. Currently, cross-domain access is not supported by Silverlight.</para></remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpUploader.AreUploadsDeferred">
            <summary>
            Gets a boolean value indicating whether the HttpUploader object is in deferred mode.
            </summary>
            <value>true if the HttpUploader object is in deferred mode; otherwise, false.</value>
            <remarks>To defer uploads, call DeferUploads on the HttpUploader object before calling any of the upload methods. 
            When uploads are deferred, calls to the "BeginUpload" methods will accumulate data in memory. The actual transfer 
            to the Web server will only occur when BeginPerformUploads/EndPerformUploads is called.</remarks>
        </member>
        <member name="P:Xceed.Http.Uploader.HttpUploader.CurrentDeferredAsynchronousUpload">
            <summary>
            Gets the current asynchronous upload operation.
            </summary>
            <value>An IAsyncResult representing the current asynchronous upload operation.</value>
        </member>
        <member name="T:Xceed.Http.MultipartFormDataItem">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.AbstractFile">
            <summary>
            Represents a generic file and exposes properties and methods that allow file-oriented operations to be performed.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead">
            <summary>
            Opens the file for reading.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks>
            <para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para>
            <para>
            The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para>
            </remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while reading the data from the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified file sharing mode.
            </summary>    
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.</para><para>
            The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support
            any or all of the values defined in this enumeration. In this case, an exception is thrown.
            </para></remarks> 
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while reading the data from the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Opens the file for reading and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>The file will be opened with <see cref="F:System.IO.FileShare.Read"/> shared access.</para>
            <para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while reading the data from the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenRead(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare)">
            <summary>
            Opens the file for reading with the specified file sharing mode and raises
            events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how 
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to read data from the file.</returns>
            <remarks><para>The returned stream is guaranteed to be readable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different 
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support 
            any or all of the values defined in this enumeration. In this case, an exception is thrown.</para>
            </remarks>   
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while reading the data from the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="overwrite"><see langword="true"/> if existing data for the item
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.</para><para>
            The file will be opened with <see cref="F:System.IO.FileShare.None"/> shared access.
            </para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified file sharing mode.
            </summary>
            <param name="overwrite"><see langword="true"/> if existing data for the item
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may not support
            any or all of the values defined in this enumeration. In this case, an exception is thrown.
            </para><para>
            Some File implementations may not support appending or overwriting. In this case, an exception is thrown.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is ignored.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean)">
            <summary>
            Opens the file for writing and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the item 
            should be replaced; <see langword="false"/> if existing data should be preserved, 
            appending new data at the end.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The file will be opened with <see cref="F:System.IO.FileShare.None"/> shared access.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.OpenWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing with the specified file sharing 
            mode and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the item 
            should be replaced; <see langword="false"/> if existing data should be preserved, 
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that 
            determines how the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>The returned stream is guaranteed to be writable, but may or may not be seekable.</para>
            <para>The <paramref name="share"/> parameter allows you to control how the file is shared by different
            processes. Some specializations of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class may 
            not support any or all of the values defined in this enumeration. In this case, 
            an exception is thrown.</para>
            <para>Some File implementations may not support appending or overwriting. 
            In this case, an exception is thrown.</para>
            <para>If there is no existing data, the parameter <paramref name="overwrite"/> is ignored.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite">
            <summary>
            Creates a file and opens it for writing.
            </summary>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.
            </para><para>
            The file will be opened with None shared access. 
            </para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(System.IO.FileShare)">
            <summary>
            Creates a file and opens it for writing using the specified file sharing mode.
            </summary>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by different 
            processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.
            </para><para>
            The <param refname="share"/> parameter allows you to control how the file is shared by different processes. Some 
            specializations of the AbstractFile class may not support any or all of the values defined in this enumeration. 
            In this case, an exception is thrown. 
            </para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Creates a file and opens it for writing.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.
            </para><para>
            The file will be opened with None shared access. 
            </para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CreateWrite(Xceed.FileSystem.FileSystemEvents,System.Object,System.IO.FileShare)">
            <summary>
            Creates a file and opens it for writing using the specified file sharing mode and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how the file will be shared by different 
            processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be seekable.
            </para><para>
            The <param refname="share"/> parameter allows you to control how the file is shared by different processes. Some 
            specializations of the AbstractFile class may not support any or all of the values defined in this enumeration. 
            In this case, an exception is thrown. 
            </para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while writing the data to the file; 
            reports the exception and allows recovery from the exception.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Copies the file's data to another file.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object that
            represents the file to which the current file's data must be copied. 
            Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if the destination file should
            be replaced if it exists; <see langword="false"/> otherwise.</param><returns>
            A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the destination file.</returns>
            <remarks><para>
            This method only copies the <b>data</b> of a file to another file.</para><para>
            If the file specified by <paramref name="destinationFile"/> does not exist, it is
            created. If it does exist, an exception is thrown if <paramref name="replaceIfExists"/>
            is <see langword="false"/>, or it is overwritten if <paramref name="replaceIfExists"/> 
            is <see langword="true"/>.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.CopyTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Copies the file's data to another file, and raises events during the process.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object that represents the file to 
            which the current file's data must be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if the destination file should
            be replaced if it exists; <see langword="false"/> otherwise.</param><returns>
            A reference to a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the destination file.</returns>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. 
            Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            This method only copies the <b>data</b> of a file to another file.</para><para>
            If the file specified by <paramref name="destinationFile"/> does not exist, it is
            created. If it does exist, an exception is thrown if <paramref name="replaceIfExists"/>
            is <see langword="false"/>, or it is overwritten if <paramref name="replaceIfExists"/> is 
            <see langword="true"/>.</para></remarks>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have been and must 
            be copied for the current file.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while copying the file, 
            reports the exception and allows recovery from the exception and continues copying the file.</event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Moves the contents of the <see cref="T:Xceed.FileSystem.AbstractFile"/> object to the target
            <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object into which the
            contents of the item will be moved. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <remarks><para>If the physical file specified by <paramref name="destinationFile"/>
            does not exist, it is created.</para></remarks>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly 
            moved item.</returns>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.MoveTo(Xceed.FileSystem.FileSystemEvents,System.Object,Xceed.FileSystem.AbstractFile,System.Boolean)">
            <summary>
            Moves the contents of the <see cref="T:Xceed.FileSystem.AbstractFile"/> object to the target
            <see cref="T:Xceed.FileSystem.AbstractFile"/> object and raises events during the process.
            </summary>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used 
            to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the 
            event handler when an event is raised.</param>
            <param name="destinationFile">An <see cref="T:Xceed.FileSystem.AbstractFile"/> object into which the
            contents of the item will be moved. Cannot be <see langword="null"/>.</param>
            <param name="replaceIfExists"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
            <remarks><para>If the physical file specified by <paramref name="destinationFile"/>
            does not exist, it is created.</para></remarks>
            <returns>A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that represents the newly 
            moved item.</returns>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression">Every time an item is about to be 
            moved, reports how many items have been moved and the total number of items that 
            must be moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression">Every 32k, reports how many bytes have 
            been and must be moved for the current item, as well as for the entire set of items 
            that are being moved.</event>
            <event cref="E:Xceed.FileSystem.FileSystemEvents.ItemException">When an exception occurs while moving 
            an item, reports the exception and allows to recover from the exception and 
            continue moving the items.                                                                                                                                       </event>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoCopyTo(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean)">
            <summary>
            Copies the file into the destination.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">An <see cref="T:Xceed.FileSystem.FileSystemItem"/> object into which the
            file will be copied. Cannot be <see langword="null"/>.</param>
            <param name="replaceExistingFiles"><see langword="true"/> if existing items in 
            the destination should be replaced; <see langword="false"/> otherwise.</param>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream should be guaranteed to be readable, but does not have to be seekable.
            </para><para>
            The <paramref name="share"/> parameter should allow control over how the file is 
            shared by different processes. If the values defined in this enumeration are not 
            supported, an exception should thrown.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>The returned stream should be guaranteed to be writable, but does not have to be seekable.</para><para>
            The <paramref name="share"/> parameter should allow control over how the file is 
            shared by different processes. If the values defined in this enumeration are not 
            supported, an exception should be thrown.</para><para>
            If the File implementation does not support appending or overwriting, an 
            exception should be thrown.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> should be 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used to write data to the file.</returns>    
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.DoCreateWrite(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Creates the file and opens it for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object which is responsible for raising 
            all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
            <remarks><para>The returned stream should be guaranteed to be writable, but does not have to be seekable.</para><para>
            The <paramref name="share"/> parameter should allow control over how the file is 
            shared by different processes. If the values defined in this enumeration are not 
            supported, an exception should be thrown.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AbstractFile.BuildList(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem,System.Boolean,System.Boolean,System.Boolean,Xceed.FileSystem.Filter[])">
            <summary>
            Builds a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="destination">The eventual target for the item that will be procesed. 
            For example, the desination folder for a folder that will be copied.</param>
            <param name="forward"><see langword="true"/> if folders will be added to the list of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process first; <see langword="false"/> if files
            will be added to the list first.</param>
            <param name="recursive"><see langword="true"/> if items in subfolders should be
            added to the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="includeFolders"><see langword="true"/> if folders will be included 
            in the list of items to process; <see langword="false"/> otherwise.</param>
            <param name="filters">An array of objects that can be used to filter the 
            list of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to process.</param>   
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.Size">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception is thrown.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.AbstractFile.DoSize">
            <summary>
            Gets the size of the file in bytes. 
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>Some types of files may not have the size information available.
            In this case, <see langword="-1"/> should be returned.</para><para>
            If the file does not physically exist, an exception should be thrown.</para></remarks>
        </member>
        <member name="M:Xceed.Http.HttpFile.OnBuildingHttpWebRequest(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpFile.OnNewHttpWebRequestWriteStream(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpFile.OnWriteStreamClose(Xceed.Http.HttpStream,System.Object)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.EncodeUploadToBase64PropertyKey">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_properties">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_url">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_exists">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_size">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_lastWrite">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpFile.m_request">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpFile.DoCreateWrite(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.Request">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.Url">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.UploadMethod">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.Rollback">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.UseHttp11">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.ContentType">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.Boundary">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.BatchUpdateable">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.DoName">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFile.DoFullName">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.MultipartFormDataItem.DoApplyPropertiesFrom(Xceed.FileSystem.FileSystemEventsSession,Xceed.FileSystem.FileSystemItem)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="sourceItem"></param>
        </member>
        <member name="M:Xceed.Http.MultipartFormDataItem.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormDataItem.Filename">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.MultipartFormDataItem.MainItemInternal">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.StringItem.m_name">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.StringItem.m_value">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.StringItem.m_encoding">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.StringItem.Value">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.StringItem.Encoding">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.StringItem.BatchUpdateable">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.StringItem.DoName">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.StringItem.DoFullName">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.DefaultEncodedHttpOptions">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.HttpClientCommon.MainThreadID">
            <summary>
            We assume that static fields will be initialized by the main thread at startup
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpClientCommon.IsMainThread">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpClientCommon.PerformHEAD(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpClientCommon.PerformDELETE(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpClientCommon.CreateWebRequest(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpClientCommon.GetWebResponse(System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpClientCommon.RequestHeadersEncoding">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.EncodeContentEncoding(System.Text.StringBuilder,Xceed.Http.CompressionMethod,Xceed.Http.CompressionLevel,Xceed.Http.EncryptionMethod,Xceed.Http.EncryptionLevel)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.EncodeContentType(System.Text.StringBuilder,Xceed.Http.CompressionMethod,Xceed.Http.CompressionLevel,Xceed.Http.EncryptionMethod,Xceed.Http.EncryptionLevel)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.CreateEncodingStream(System.IO.Stream,Xceed.Http.CompressionMethod,Xceed.Http.CompressionLevel,Xceed.Http.EncryptionMethod,Xceed.Http.EncryptionLevel)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.GetEncodingOptionsFromObject(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.GetEncodingOptionsFromObject(Xceed.FileSystem.FileSystemEvents)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpCommon.GetEncodingOptionsFromObject(Xceed.Http.HttpOptions)">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Http.EncodedHttpFile">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.Initialize">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.GetCompressionMethod(Xceed.FileSystem.FileSystemItem)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.SetCompressionMethod(Xceed.FileSystem.FileSystemItem,Xceed.Http.CompressionMethod)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            </summary>
            <param name="session"></param>
            <param name="overwrite"></param>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.OnBuildingHttpWebRequest(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.EncodedHttpFile.OnNewHttpWebRequestWriteStream(Xceed.FileSystem.FileSystemEventsSession,System.Net.HttpWebRequest,System.IO.Stream@)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpFile.CompressionMethod">
            <summary>
            TODO: Change into a property
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpFile.CompressionLevel">
            <summary>
            TODO: Change into a property
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpFile.EncryptionMethod">
            <summary>
            TODO: Change into a property
            </summary>
        </member>
        <member name="F:Xceed.Http.EncodedHttpFile.EncryptionLevel">
            <summary>
            TODO: Change into a property
            </summary>
        </member>
        <member name="F:Xceed.Http.EncryptionLevel.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="F:Xceed.Http.EncryptionMethod.None">
            <summary>No compression is applied.</summary>
        </member>
        <member name="M:Xceed.Http.HttpStream.Close">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpStream.CanClose">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpStream.Dispose(System.Boolean)">
            <summary>
            </summary>
            <param name="explicitDispose"></param>
        </member>
        <member name="T:Xceed.Http.HttpStream.OnClose">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.ValidateUrl(System.Uri)">
            <summary>
            </summary>
            <remarks>This method throws in case of error.</remarks>
        </member>
        <member name="M:Xceed.Http.HttpCommon.GetNamePart(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.GetFolderPart(System.Uri)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.ChangeName(System.Uri,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.ChangeFolderName(System.Uri,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.MergeHeaders(System.Collections.Generic.Dictionary{System.String,System.String},System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.GetOptionsFromObject(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.GetOptionsFromObject(Xceed.FileSystem.FileSystemEvents)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.AddStringToHeader(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.AddStringToContentType(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.StringStartsWithIgnoreCase(System.String,System.String)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Http.HttpCommon.SupportsBinaryUpload(System.String)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFolder.BatchUpdateable">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFolder.DoName">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Http.HttpFolder.DoFullName">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.UIThreadInvoker">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.AddReference">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.RemoveReference">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.InvokeMethod(System.Delegate,System.Threading.EventWaitHandle,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.InvokeMethod(System.Windows.Threading.Dispatcher,System.Delegate,System.Threading.EventWaitHandle,System.Object[])">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Utils.Silverlight.UIThreadInvoker.MethodInvoked(Xceed.Utils.Silverlight.UIThreadInvoker.InvokeMethodCommandInternal)">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.UIThreadInvoker.Invoker">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Silverlight.UIThreadInvoker.Dispatcher">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.UIThreadInvoker.DummyElement">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.UIThreadInvoker.Command">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.UIThreadInvoker.InvokeMethodCommand">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.Utils.Silverlight.UIThreadInvoker.InvokeMethodCommandInternal">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.Utils.Text.DefaultUTF8Encoding.UTF8">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.VirtualFolder.ItemsInternal">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.VirtualFolder.BatchUpdateable">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.VirtualFolder.DoName">
            <summary>
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.VirtualFolder.DoFullName">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Compression.Base64.CalculateBufferSize(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="F:Xceed.Compression.Base64.EmptyBuffer">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Compression.Base64Encoder.#ctor(System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.Compression.Base64Encoder.Compress(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Byte[]@)">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ByteProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ByteProgressionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ByteProgressionEventArgs">
            <summary>
            Provides byte progression information.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_aborted">
            <summary>
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ByteProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo,Xceed.FileSystem.ProgressionInfo)">
            <summary>
            Initializes a new instance of the ByteProgressionEventArgs argument class.
            </summary>
            <param name="currentFileBytes">The size, in bytes, of the file currently being processed.</param>
            <param name="allFilesBytes">The total combined size, in bytes, of all files being processed.</param>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_currentFileBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to the current item being processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ByteProgressionEventArgs.m_allFilesBytes">
            <summary>
            An instance of the ProgressionInfo class representing the byte count 
            information in regards to all the items to be processed.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.CurrentFileBytes">
            <summary>
            Gets the size, in bytes, of the file currently being processed.
            </summary>
            <value>A value indicating the size, in bytes, of the file being processed.</value>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.AllFilesBytes">
            <summary>
            Gets the total combined size, in bytes, of all files being processed.
            </summary>
            <value>A value indicating the size, in bytes, of all the files being processed.</value>
        </member>
        <member name="P:Xceed.FileSystem.ByteProgressionEventArgs.Aborted">
            <summary>
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemException"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemExceptionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionEventArgs">
            <summary>
            Provides information on the exception that was thrown during a process.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemExceptionEventArgs.#ctor">
            <summary>
            Intializes a new instance of the ItemExceptionEventArgs argument class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_exception">
            <summary>
            An instance of the Exception class representing the exception that was thrown 
            and caused the OnItemException event to be raised.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionEventArgs.m_action">
            <summary>
            An instance of the ItemExceptionAction class representing the action
            that will be taken in the OnItemException event handler. 
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Exception">
            <summary>
            Gets or sets the exception that was thrown.
            </summary>
            <value>A reference to a <see cref="T:Xceed.FileSystem.FileSystemException"/> object.</value>
        </member>
        <member name="P:Xceed.FileSystem.ItemExceptionEventArgs.Action">
            <summary>
            Gets or sets the action taken when an exception is thrown during the processing of a
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object. 
            </summary>
            <value>A value indicating the action taken when an exception is thrown</value>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ItemProgression"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">An <see cref="T:Xceed.FileSystem.ItemProgressionEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemProgressionEventArgs">
            <summary>
            Provides item progression information.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemProgressionEventArgs.#ctor(Xceed.FileSystem.ProgressionInfo)">
            <summary>
            Initializes an new instance of the ItemProgressionEventArgs argument class.
            </summary>
            <param name="allItems">The total number of items being processed.</param>
        </member>
        <member name="F:Xceed.FileSystem.ItemProgressionEventArgs.m_allItems">
            <summary>
            An instance of the ProgressionInfo class representing the item count information.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ItemProgressionEventArgs.AllItems">
            <summary>
            Gets the total number of items being processed.
            </summary>
            <value>A value indicating the number if items being processed.</value>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:Xceed.FileSystem.FileSystemEvents.ScanningFolder"/> event.
            </summary>
            <param name="sender">The object on which the method was called.</param>
            <param name="e">A <see cref="T:Xceed.FileSystem.ScanningFolderEventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:Xceed.FileSystem.ScanningFolderEventArgs">
            <summary>
            Provides information on the folder being scanned or accessed.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ScanningFolderEventArgs.#ctor">
            <summary>
            Initializes a new instance of the ScanningFolderEventArgs argument class.
            </summary>
        </member>
        <member name="T:Xceed.FileSystem.AutoBatchUpdate">
            <summary>
            Class that verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object)">
            <summary>
            Verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </summary>
            <param name="batchUpdateable"> object that <b>may or may not</b> implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.</param>
            <remarks><para>
            The <see langword="AutoBatchUpdate"/> class will verify if <paramref name="batchUpdateable"/> implements the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and will automatically 
            call the <see langword="BeginUpdate"/> and <see langword="EndUpdate"/> methods if it does. If <paramref name="batchUpdateable"/> 
            does not implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface, the code will be executed normally.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.#ctor(System.Object,Xceed.FileSystem.FileSystemEvents,System.Object)">
            <summary>
            Verifies if the object implements the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and raises events during the process.
            </summary>
            <param name="batchUpdateable">Object that <b>may or may not</b> implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.</param>
            <param name="events">A <see cref="T:Xceed.FileSystem.FileSystemEvents"/> object that will be used to raise events. Cannot be <see langword="null"/>.</param>
            <param name="userData">Opaque data that will be passed back to the event handler when an event is raised.</param>
            <remarks><para>
            The <see langword="AutoBatchUpdate"/> class will verify if <paramref name="batchUpdateable"/> implements the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface and will automatically 
            call the <see langword="BeginUpdate"/> and <see langword="EndUpdate"/> methods if it does. If <paramref name="batchUpdateable"/> 
            does not implement the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface, the code will be executed normally.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.AutoBatchUpdate.System#IDisposable#Dispose">
            <summary>
            Calls the <see langword="EndUpdate"/> method on the object that was passed in the construction of the
            <see langword="AutoBatchUpdateable"/> class.
            </summary>    
            <remarks><para>
            The <see langword="EndUpdate"/> method will only be called if the objecy implemented the 
            <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface.
            </para></remarks>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemException">
            <summary>
            Exception that is thrown when an error occurs in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            This exception serves as the base class for all custom exceptions defined 
            in the Xceed.FileSystem namespace.
            </para><para>
            Specializations of the FileSystem object model also throw exceptions that derives
            from <see langword="FileSystemException"/>.
            </para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception, or an empty string.</value>
        </member>
        <member name="P:Xceed.FileSystem.FileSystemException.Item">
            <summary>
            Gets or sets the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that caused the current exception.
            </summary>
            <value>The FileSystemItem object that caused the exception to be thrown. Can be null.</value>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemInternalException">
            <summary>
            Exception that is thrown when something unexpected occurs in the Xceed.FileSystem namespace.
            </summary>
            <remarks><para>
            This exception means that there was an internal failure in the library, and that nothing could be
            done to prevent it. Such failures should never occur.
            </para><para>
            To get more details about what went wrong, you can inspect the <see cref="P:System.Exception.InnerException"/>
            property. It is a reference to the exception that caused the internal failure.
            </para><para>
            If you ever catch this exception in your code, please contact Xceed Software Technical Support
            immediately.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor">
            <summary>
            Initializes a new instance of the exception.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified inner exception.
            </summary>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemInternalException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemIOException">
            <summary>
            Exception that is thrown when an I/O error occurs while reading from or writing
            to an <see cref="T:Xceed.FileSystem.AbstractFile"/> object.
            </summary>
            <remarks>
            A <see cref="T:System.IO.IOException"/> will almost always be available in the
            <see cref="P:System.Exception.InnerException"/> property of this exception. This is the I/O exception
            that caused the <see langword="FileSystemIOException"/> to be thrown.
            </remarks>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemIOException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the exception with the specified message text.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Xceed.FileSystem.FileSystemNotSupportedException">
            <summary>
            Exception that is thrown when calling a method or accessing a property that
            is not supported by a <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.FileSystemNotSupportedException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemAlreadyExistsException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that already exists.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemAlreadyExistsException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemDoesNotExistException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that does not yet exist.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemDoesNotExistException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsReadOnlyException">
            <summary>
            Exception that is thrown when performing an operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that is read only.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsReadOnlyException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.ItemIsRootFolderException">
            <summary>
            Exception that is thrown when performing an illegal operation on a <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            object that is a root folder.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes a new instance of the exception with the specified message text and FileSystemItem object.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified FileSystemItem object and inner exception.
            </summary>
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="M:Xceed.FileSystem.ItemIsRootFolderException.#ctor(System.String,Xceed.FileSystem.FileSystemItem,System.Exception)">
            <summary>
            Initializes a new instance of the exception with the specified message text, FileSystemItem object
            and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>	
            <param name="item">The FileSystemItem object that caused the current exception.</param>
            <param name="inner">The exception that initially caused the current exception to be thrown.</param>
        </member>
        <member name="T:Xceed.FileSystem.FilterScope">
            <summary>
            Specifies which type of <see cref="T:Xceed.FileSystem.FileSystemItem"/> will be filtered by a 
            <see cref="T:Xceed.FileSystem.Filter"/> object.
            </summary>
            <remarks><para>
            The File and Folder values determine what items are included or excluded, but do not 
            prevent recursing into subfolders even though that folder would be excluded by the filter.
            To prevent recursing into a subfolder, use the Recurse value with the applicable filter.
            </para></remarks>
            <example>
            This example shows how to prevent the contents of a specific subfolder from
            being copied, while copying everything else recursively.
            <code lang="Visual Basic"> 
            ' VB.NET sucks
            </code> 
            sourceFolder.CopyFilesTo( 
              destFolder, true, true, 
              new NotFilter( new NameFilter( "Private", FilterScope.Recurse ) ) );
            <code lang="C#"> 
            </code></example>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.File">
            <summary>The filter will be applied to any <see cref="T:Xceed.FileSystem.AbstractFile"/> object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.Folder">
            <summary>The filter will be applied to any <see cref="T:Xceed.FileSystem.AbstractFolder"/> object.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.All">
            <summary>The filter will be applied to all types of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterScope.Recurse">
            <summary>
            The filter <b>only </b> applies to subfolder <see cref="T:Xceed.FileSystem.AbstractFolder"/> objects when 
            the <i>recursive </i> parameter of the applicable methods is set to <see langword="true"/>.</summary>
        </member>
        <member name="T:Xceed.FileSystem.FilterResult">
            <summary>
             Indicates if an item was accepted or rejected by a <see cref="T:Xceed.FileSystem.Filter"/>, or if the 
            <see cref="T:Xceed.FileSystem.FilterScope"/> does not apply to the specified <see cref="T:Xceed.FileSystem.FileSystemItem"/>.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.Reject">
            <summary>The item was rejected by the filter.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.Accept">
            <summary>The item was accepted by the filter.</summary>
        </member>
        <member name="F:Xceed.FileSystem.FilterResult.NotApplicable">
            <summary> The filter's scope does not apply to this item type or the specified <see cref="T:Xceed.FileSystem.FilterScope"/>.</summary>
        </member>
        <member name="T:Xceed.FileSystem.Filter">
            <summary>
            The <see langword="Filter"/> class allows to filter a list of <see cref="T:Xceed.FileSystem.FileSystemItem"/>
            objects.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches at least one of the
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches one
            of the provided filters; <see langword="false"/> otherwise.</returns>
            <remarks><para>Only filters with a File or Folder <see cref="T:Xceed.FileSystem.FilterScope"/> are considered, 
            depending on the item type.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingOne(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches at least one of the
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="applicableScope">The <see cref="T:Xceed.FileSystem.FilterScope"/> of the filters to consider. Filters that do not share a common scope are ignored.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FilterResult"/> value indicating whether the item matches at least one of the  
            <see cref="T:Xceed.FileSystem.Filter"/> objects, or whether the <see cref="T:Xceed.FileSystem.FilterScope"/> does not apply to the 
            specified <see cref="T:Xceed.FileSystem.FileSystemItem"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches <b>all</b> of the 
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            <b>all</b> of the provided filters; <see langword="false"/> otherwise.</returns>
            <remarks><para>Only filters with a File or Folder <see cref="T:Xceed.FileSystem.FilterScope"/> are considered, 
            depending on the item type.</para></remarks>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatchingAll(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope,Xceed.FileSystem.Filter[])">
            <summary>
            Verifies if the <see cref="T:Xceed.FileSystem.FileSystemItem"/> object matches <b>all</b> of the 
            provided filters.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object that will be verified.</param>
            <param name="applicableScope">The <see cref="T:Xceed.FileSystem.FilterScope"/> of the filters to consider. Filters that do not share a common scope are ignored.</param>
            <param name="filters">The array of <see cref="T:Xceed.FileSystem.Filter"/> objects against which
            <paramref name="item"/> will be verified.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FilterResult"/> value indicating whether the item matches all  
            the <see cref="T:Xceed.FileSystem.Filter"/> objects, or whether the <see cref="T:Xceed.FileSystem.FilterScope"/> does not apply to the 
            specified <see cref="T:Xceed.FileSystem.FileSystemItem"/>.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the item matches the filter.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to verify.</param>
            <returns><see langword="true"/> if <paramref name="item"/> matches 
            the filter or does not apply to the filter; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemMatching(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FilterScope)">
            <summary>
            Gets a <see cref="T:Xceed.FileSystem.FilterResult"/> value indicating if the item matches the filter.
            </summary>
            <param name="item">The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object to verify.</param>
            <param name="applicableScope">The applicable <see cref="T:Xceed.FileSystem.FilterScope"/>.</param>
            <returns>A <see cref="T:Xceed.FileSystem.FilterResult"/> value: NotApplicable if the filter's scope does not match 
            the applicable scope; Accept if the filter matches the item; Reject otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.Filter.#ctor">
            <summary>
            Initializes a new instance of the Filter class.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.Filter.#ctor(Xceed.FileSystem.FilterScope)">
            <summary>
            Initializes a new instance of the Filter class specifying the <see cref="T:Xceed.FileSystem.FilterScope"/>.
            </summary>
            <param name="scope">A <see cref="T:Xceed.FileSystem.FilterScope"/> value specifying which type of 
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> will be filtered by a <see cref="T:Xceed.FileSystem.Filter"/> object.</param>
        </member>
        <member name="M:Xceed.FileSystem.Filter.IsItemInScope(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Retrieves a boolean value indicating if the specified item is within the
            scope of the filter.
            </summary>
            <param name="item">The item to verify.</param>
            <returns><see langword="true"/> if the item is within the scope of the filter; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="P:Xceed.FileSystem.Filter.Scope">
            <summary>
            Gets or sets the scope of the filter.
            </summary>
            <value>A combination of <see cref="T:Xceed.FileSystem.FilterScope"/> values that identify the type of
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects that are handled by this filter.</value>
        </member>
        <member name="T:Xceed.FileSystem.ItemExceptionAction">
            <summary>
            Value representing the action to take when an exception is thrown during the processing of a
            <see cref="T:Xceed.FileSystem.FileSystemItem"/> object. 
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Abort">
            <summary>The entire process will be aborted and the exception will be thrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Retry">
            <summary>Retry processing the item. A corrective action <b>must</b> be taken otherwise 
            the same exception will be rethrown.</summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemExceptionAction.Ignore">
            <summary>Ignore the item that caused the error and continue processing the other items.</summary>
        </member>
        <member name="T:Xceed.FileSystem.ItemPair">
            <summary>
            Represents a pair of <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects consisting of the 
            item being processed and its eventual target or destination item.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ItemPair.#ctor(Xceed.FileSystem.FileSystemItem,Xceed.FileSystem.FileSystemItem)">
            <summary>
            Initializes an instance of the <see cref="T:Xceed.FileSystem.ItemPair"/> class specifying
            the current and target items.
            </summary>
            <param name="currentItem">The current <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being processed.</param>
            <param name="targetItem">The eventual target or destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.</param>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.current">
            <summary>
            The <see cref="T:Xceed.FileSystem.FileSystemItem"/> object being procesed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ItemPair.target">
            <summary>
            The eventual target or destination <see cref="T:Xceed.FileSystem.FileSystemItem"/> object.
            </summary>
            <remarks><para>Can be <see langword="null"/> in cases where there is no 
            target, for example when calling the <seealso cref="M:Xceed.FileSystem.FileSystemItem.Refresh"/> method.</para></remarks>
        </member>
        <member name="T:Xceed.FileSystem.ProgressionInfo">
            <summary>
            Provides progression information for progression events.
            </summary>
        </member>
        <member name="M:Xceed.FileSystem.ProgressionInfo.#ctor">
            <summary>
            Initializes a new instance of the ProgressionInfo class.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_processed">
            <summary>
            The amount of bytes or items processed.
            </summary>
        </member>
        <member name="F:Xceed.FileSystem.ProgressionInfo.m_total">
            <summary>
            The total amount of bytes or items to process.
            </summary>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Processed">
            <summary>
            Gets or sets the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.
            </summary>
            <value>A value indicating the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.</value>   
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Total">
            <summary>    
            Gets or sets the total number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.
            </summary>
            <value>A value indicating the number of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects to be processed.</value>
        </member>
        <member name="P:Xceed.FileSystem.ProgressionInfo.Percent">
            <summary>
            Gets the ratio (percentage) of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.
            </summary>
            <value>A value indicating the ratio of bytes or <see cref="T:Xceed.FileSystem.FileSystemItem"/> objects processed so far.</value>
        </member>
        <member name="T:Xceed.FileSystem.SingleFileFolder">
            <summary>
            This class exposes a single file specified at construction. 
            You cannot create more files or folders in that folder.
            </summary>
            <remarks>Its primary use is to provide a RootFolder and ParentFolder for special files
            like the StreamFile.</remarks>
        </member>
        <member name="T:Xceed.FileSystem.StreamFile">
            <summary>
            Specialization of the <see cref="T:Xceed.FileSystem.AbstractFile"/> class that implements access 
            to any type of stream as though it were a file.
            </summary>
            <example>
            The following example demonstrates how to extract the contents of a zip file contained
            within the resources of an application to a local folder.
            <code lang="Visual Basic">
            ' Create a stream that access a zip file contained within the resources
            ' of an application.
            Dim resources As Stream = Me.GetType().Assembly.GetManifestResourceStream( "Resources.zip" )
            
            ' Initialize a new instance of the StreamFile class specifying the inner stream
            ' as well as the name of the file.
            Dim file As New StreamFile( resources, "Resources.zip" )
            
            ' Initialize a new instance of the ZipArchive class using 
            ' newly created StreamFile object.
            Dim zip As New ZipArchive( file )
            
            ' Copy files from the zip file contained within the resources to a local folder.
            zip.CopyFilesTo( New DiskFolder( "d:\Destination" ), false, true )
            </code>
            <code lang="C#">
            // Create a stream that access a zip file contained within the resources
            // of an application.
            Stream resources = this.GetType().Assembly.GetManifestResourceStream( "Resources.zip" );
            
            // Initialize a new instance of the StreamFile class specifying the inner stream
            // as well as the name of the file.
            StreamFile file = new StreamFile( resources, "Resources.zip" );
            
            // Initialize a new instance of the ZipArchive class using 
            // newly created StreamFile object.
            ZipArchive zip = new ZipArchive( file );
            
            // Copy files from the zip file contained within the resources to a local folder.
            zip.CopyFilesTo( new DiskFolder( @"d:\Destination" ), false, true );
            </code>
            </example>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the StreamFile class specifying its inner stream.
            </summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.#ctor(System.IO.Stream,System.String)">
            <summary>
            Initializes a new instance of the StreamFile class specifying its inner stream as
            well as its name.
            </summary>
            <param name="stream">The inner stream around which the StreamFile will be created.</param>
            <param name="name">The name representing the StreamFile object. </param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoRefresh(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Re-reads the information from the physical item. In the case of a StreamFile object, there
            is nothing to refresh.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>   
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoDelete(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Permanently deletes the physical item. 
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>    
            <remarks><note type="caution">This does not close the attached stream; It simply invalidates this 
            StreamFile.</note></remarks>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoCreate(Xceed.FileSystem.FileSystemEventsSession)">
            <summary>
            Creates the physical file. This method will always throw a <see cref="T:Xceed.FileSystem.FileSystemNotSupportedException"/> exception
            since it is not possible to recreate a StreamFile once it has been destroyed.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsSameAs(Xceed.FileSystem.FileSystemItem)">
            <summary>
            Gets a boolean value indicating if the source and target file are the same.
            </summary>
            <param name="target">A <see cref="T:Xceed.FileSystem.FileSystemItem"/> object representing the destination file.</param>
            <returns><see langword="true"/> if the source and target files are the same; 
            <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.IsPathRooted(System.String)">
            <summary>
            Returns a boolean value indicating if the path passed is rooted. 
            </summary>
            <param name="path">The path to verify.</param>
            <returns><see langword="true"/> since every StreamFile is considered to be rooted.</returns>  
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenRead(Xceed.FileSystem.FileSystemEventsSession,System.IO.FileShare)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be readable, but may or may not be seekable.
            </para><para>
            The <paramref name="share"/> parameter allows you to control how the file is 
            shared by different processes.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to read data from the file.</returns>
        </member>
        <member name="M:Xceed.FileSystem.StreamFile.DoOpenWrite(Xceed.FileSystem.FileSystemEventsSession,System.Boolean,System.IO.FileShare)">
            <summary>
            Opens the file for writing.
            </summary>
            <param name="session">A reference to a <see cref="T:Xceed.FileSystem.FileSystemEventsSession"/> object
            which is responsible for raising all events that occur during the process.</param>
            <param name="overwrite"><see langword="true"/> if existing data for the file
            should be replaced; <see langword="false"/> if existing data should be preserved,
            appending new data at the end.</param>
            <param name="share">A <see cref="T:System.IO.FileShare"/> constant that determines how
            the file will be shared by different processes.</param>
            <remarks><para>
            The returned stream is guaranteed to be writable, but may or may not be 
            seekable.</para><para>
            The <paramref name="share"/> parameter allows you to control how the file is shared 
            by different processes.</para><para>
            If there is no existing data, the parameter <paramref name="overwrite"/> is 
            ignored.</para></remarks>
            <returns>A <see cref="T:System.IO.Stream"/> object that can be used
            to write data to the file.</returns>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoName">
            <summary>
            Gets or sets the filename, without path, of the item.
            </summary>
            <value>A string that represents the filename, without path, of the item.</value>
            <remarks><para>
            When assigning a new name to this property, the physical item is immediately renamed if it exists. If it does not exist, the new
            name is cached and will be applied whenever this item is created. In either cases, if a physical item with the same name already exists,
            an exception is thrown.</para><para>
            The name of an item must <b>not</b> end with a path separator 
            character regardless of whether it represents a file or a folder.</para><para>
            The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoFullName">
            <summary>    
            Gets the full name of the item.
            </summary>
            <value>A string that represents the full name of the item.</value>
            <remarks><para>
            The fullname consists of the item's name, fully-qualified, with a path. 
            For example: "folder\file.zip".</para>
            <para>The separator character is defined in <see cref="F:System.IO.Path.DirectorySeparatorChar"/>
            and <see cref="F:System.IO.Path.AltDirectorySeparatorChar"/>.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoAttributes">
            <summary>
            Gets or sets the attributes of the item.
            </summary>
            <value>A combination of <see cref="T:System.IO.FileAttributes"/>
            values that represents the attributes of the item.</value>
            <remarks><para>
            When changing the item's attributes through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the attributes are cached and will be 
            applied whenever this item is created.</para><para>
            Some types of items may not expose attributes. In this case, an exception is thrown when trying to 
            read or modify the attributes.</para><para>
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoCreationDateTime">
            <summary>
            Gets or sets the creation date and time of the item.
            </summary>
            <value>The date and time when the item was created.</value>
            <remarks><para>
            When changing the item's creation date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para>
            </remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastWriteDateTime">
            <summary>
            Gets or sets the modification date and time of the item.
            </summary>
            <value>The date and time when the item was modified.</value>
            <remarks><para>
            When changing the item's modification date through this property,
            the physical item is immediately modified if it exists. 
            If it does not exist, the date is cached and will be applied whenever this item is created.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoLastAccessDateTime">
            <summary>
            Gets or sets the last access date and time of the item.
            </summary>
            <value>The date and time when the item was last accessed.</value>
            <remarks><para>
            When changing the item's access date through this property, the physical item is immediately 
            modified if it exists. If it does not exist, the date is cached and will be 
            applied whenever this item is created.</para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoParentFolder">
            <summary>
            Gets a reference to the parent folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder that contains the item, 
            or <see langword="null"/> if the item does not have a parent.</value>
            <remarks><para>
            If the current item is the root of a folder hierarchy, it has no parent folder. In this case, the 
            <see langword="ParentFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoRootFolder">
            <summary>
            Gets a reference to the root folder of this item.
            </summary>
            <value>An <see cref="T:Xceed.FileSystem.AbstractFolder"/> object that represents the folder 
            at the root of the path of this item, or <see langword="null"/> if a root 
            folder is not available.</value>
            <remarks><para>
            A root folder represents the starting point of a folder hierarchy. 
            </para><para>
            If the current item is the root of a folder hierarchy, the <see langword="RootFolder"/> property 
            returns a reference to itself.</para><para>
            If a root folder is not available, the <see langword="RootFolder"/> property returns <see langword="null"/>.
            </para></remarks>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoExists">
            <summary>
            Gets a boolean value indicating if the item physically exists.
            </summary>
            <value><see langword="true"/> if the item physically exists; <see langword="false"/> otherwise.</value>
            <remarks><para>
            This property should be evaluated before calling a method that
            needs to access the underlying physical item (For example, <see cref="M:Xceed.FileSystem.FileSystemItem.CopyTo(Xceed.FileSystem.AbstractFolder,System.Boolean)"/>),
            otherwise these methods will throw an exception.</para><para>
            The property will always reflect the physical item's existence.</para></remarks>    
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.BatchUpdateable">
            <summary>
            Gets the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> implementation for this item.
            </summary>
            <value><see langword="null"/> since the <see cref="T:Xceed.FileSystem.IBatchUpdateable"/> interface is not implemented.</value>
        </member>
        <member name="P:Xceed.FileSystem.StreamFile.DoSize">
            <summary>
            Gets the size of the file in bytes.
            </summary>
            <value>A value representing the file size in bytes.</value>
            <remarks><para>
            Some types of files may not have the size information available.
            In this case, <see langword="-1"/> is returned.</para><para>
            If the file does not physically exist, an exception is thrown.</para>
            </remarks>
        </member>
        <member name="T:Xceed.Utils.Exceptions.ExceptionFilter">
            <summary>
            Exposes utility methods for filtering exceptions.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Exceptions.ExceptionFilter.IsPublicException(System.Exception)">
            <summary>
            Determines if an exception can be thrown by a public method.
            </summary>
            <param name="exception">The exception to evaluate.</param>
            <returns>true if the exception can be thrown as-is; false if the exception should be converted.</returns>
            <remarks>
            Every public method should have a final exception handler for any un-caught
            exceptions that should call this method to determine if the exception can
            be thrown as-is to the caller (i.e. if the exception makes sense to the caller), or
            if it should be wrapped in a more meaningful exception for the caller.
            </remarks>
            <example>
            The following example illustrate how to implement this:
            <code>
            public void MyMethod()
            {
              try
              {
                DoSomething();
                DoSomethingElse();
              }
              catch( SomeSpecificException e )
              {
                HandleTheException();
              }
              catch( Exception e )
              {
                if( <B>ExceptionFilter.IsPublicException( e )</B> )
                  throw; // Simply pass the exception as-is to the caller
                  
                throw new MyUnexpectedException( "Something unexpected happened.", e );
              }
            }
            </code>
            </example>
        </member>
        <member name="T:Xceed.Utils.Files.FileMatching">
            <summary>
            Summary description for FileMatching.
            </summary>
        </member>
        <member name="M:Xceed.Utils.Files.FileMatching.MatchName(System.String,System.String,System.Boolean)">
            <summary>
            Checks if a wildcard with no path matches a name with no path.
            </summary>
            <param name="fileName">File name to match.</param>
            <param name="wildcards">Wildcard to match.</param>
            <param name="caseSensitive">Indicates if the comparison should be case-sensitive.</param>
            <returns>true if the wildcard matches the name; false otherwise.</returns>
        </member>
        <member name="T:Xceed.Utils.Streams.ClosingStreamEventHandler">
            <summary>
            Raised when the transient stream gets closed.
            </summary>
            <remarks>The sender is the TransientStream.</remarks>
        </member>
        <member name="T:Xceed.Utils.Streams.WindowStream">
            <summary>
            Pass-through stream that exposes a window (subset) of an inner stream.
            </summary>
            <remarks>
            Closing the WindowStream will also close the inner stream.
            </remarks>
            <seealso cref="T:System.IO.Stream"/>
        </member>
        <member name="M:Xceed.Utils.Streams.WindowStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a WindowStream using custom settings for the window boundaries.
            </summary>
            <param name="inner">Inner stream.</param>
            <param name="offset">Starting offset of the inner stream to expose.</param>
            <param name="length">Length of the window in bytes, or -1 to expose up to the end of the inner stream.</param>
        </member>
        <member name="M:Xceed.Utils.Streams.WindowStream.#ctor(System.IO.Stream,System.Int64)">
            <summary>
            Initializes a WindowStream of a specific length.
            </summary>
            <param name="inner">Inner stream.</param>
            <param name="length">Length of the window in bytes, or -1 to expose up to the end of the inner stream.</param>
            <remarks>
            The window will begin at the current inner stream position.
            </remarks>
        </member>
        <member name="M:Xceed.Utils.Streams.WindowStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a WindowStream that exposes the inner stream from its current position up to the end.
            </summary>
            <param name="inner">Inner stream.</param>
        </member>
        <member name="M:Xceed.Utils.Streams.WindowStream.Dispose(System.Boolean)">
            <summary>
            Provides correct cleanup of resources in the base class and its derived classes.
            </summary>
            <param name="disposing">true if this method was called by another method such as Close or Dispose; false if it was called by the finalizer.</param>
        </member>
        <member name="M:Xceed.Utils.Streams.WindowStream.CheckIfDisposed">
            <summary>
            Checks if the object has been disposed.
            </summary>
        </member>
        <member name="T:Xceed.Utils.Strings.StringCheck">
            <summary>
            Summary description for StringCheck.
            </summary>
        </member>
    </members>
</doc>
